//This code works for Self trigger mode
//there are multiple veto events for each TPC event

#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>
#include <map>
#include <math.h>
#include "TCut.h"
#include "TF1.h"
#include "TH1.h"
#include "TH2F.h"
#include "TFile.h"
#include "TCanvas.h"
#include "TTree.h"
#include "TChain.h"
#include "TRint.h"
#include "TArrayF.h"
#include "TMath.h"
#include "TString.h"
#include "TNtuple.h"
#include "TColor.h"
#include "TLegend.h"
#include "TLatex.h"
#include "TPad.h"
#include "TStyle.h"
#include <vector>
#include "VetoEvent.h"

#pragma link C++ class std::map<double, size_t>+;

TRint *theApp;
using namespace std;

//#define Write_Plots

//#define closest_cluster
#ifdef closest_cluster
string Time = "_Feb19PM";
#else
string Time = "_Feb19PM";
#endif

//string dirname="/darkside/data/Calibration/AmBe10Hz/DSTalpha/";
string dirname="/darkside/users/hqian/AmBe10Hz_Calibration/SelfTriggerData/";

/*struct VetoEvent{
  VetoEvent(): od_eventID(-1), od_nclusters(-1), od_gps_fine(-1),
               od_gps_coarse(-1), od_timestamp(-1), od_wt_charge(-1),
	       od_tpc_timestamp_diff(0)
  {}
  Int_t od_eventID;
  Int_t od_nclusters;
  Double_t od_gps_fine;
  Double_t od_gps_coarse;
  Double_t od_timestamp; //[us]                                                                                                  
  Double_t od_tpc_timestamp_diff; //[us]
  Double_t od_wt_charge;
  std::vector<Double_t> od_cluster_charge; //[PE]                                                                                   
  std::vector<Double_t> od_cluster_start; //[us]                                                                                
  std::vector<Double_t> od_cluster_height;
  std::vector<Double_t> od_cluster_multiplicity;
  std::vector<Int_t> od_cluster_pass_multcut;
  std::vector<Double_t> od_cluster_dtprompt; //[us]                                                                          
};
*/
void Readdatafile(TChain *t, int i)
{
  string filename;
  string middle="DST_Run0";
  string last=".root";
  stringstream oss;
  oss<<i;
  filename=dirname+middle+oss.str()+last;
  t->Add(filename.c_str());
  if(t->IsZombie())
    cout<<"ERROR: Wrong Data"<<endl;
  cout<<"Processing Data file: "<<filename<<endl; 
  oss.str("");
}

void Readdatafile(TChain *t,int start, int end)
{
  string filename;
  string middle="DST_Run0";
  string last=".root";
  stringstream oss;
  ifstream NameCheck;
  for(int i=start; i<=end; i++)
    {
      oss<<i;
      filename=dirname+middle+oss.str()+last;
      NameCheck.open(filename.c_str());
      if(!NameCheck.good())
	{
	  oss.str("");
	  NameCheck.close();
	  continue;
	}
      else{
	t->Add(filename.c_str());
	cout<<"Processing Data file: "<<filename<<endl; 
	oss.str("");
      }
      NameCheck.close();
    }
}

bool SortFunction(double i, double j)
{
  return (TMath::Abs(i) < TMath::Abs(j));
}

bool Compare(double i, double j)
{
  return (i < j);
}

#ifdef closest_cluster  
size_t map_idx(std::map<double,size_t> event_diff)
{
  for (std::map<double,size_t>::iterator it=event_diff.begin(); it!=event_diff.end(); ++it)
    if(it->first > 0)     
      return (it->second);
}
#endif

size_t idx_find(vector<double> event_diff_idx, double event_diff)
{
  for(size_t i=0; i<event_diff_idx.size(); i++)
    if(event_diff_idx.at(i)==event_diff)
      return i;
}

vector<int> Colors()
{
  vector<int> color;
  color.push_back(TColor::GetColor("#FB78FF"));
  color.push_back(TColor::GetColor("#B24F18"));
  color.push_back(TColor::GetColor("#2FDAFF"));
  color.push_back(TColor::GetColor("#5A1DE8"));
  color.push_back(TColor::GetColor("#B26618"));
  color.push_back(TColor::GetColor("#AE3EFF"));
  color.push_back(TColor::GetColor("#FF0000"));
  color.push_back(TColor::GetColor("#5A1DE8"));
  color.push_back(TColor::GetColor("#1CFFDF"));
  color.push_back(TColor::GetColor("#1D537F"));
  color.push_back(TColor::GetColor("#000000"));
  color.push_back(TColor::GetColor("#4A067F"));
  color.push_back(TColor::GetColor("#FF379F"));
  color.push_back(TColor::GetColor("#25DCFF"));
  color.push_back(TColor::GetColor("#92B20B"));
  color.push_back(TColor::GetColor("#59FF49"));
  color.push_back(TColor::GetColor("#E8A60C"));
  color.push_back(TColor::GetColor("#79FFFF"));
  color.push_back(TColor::GetColor("#11FF8F"));
  color.push_back(TColor::GetColor("#09B23E"));
  color.push_back(TColor::GetColor("#62B21D"));

  return color;
}

//=============================Main Funtion===================================
#ifndef __CINT__
int main(int argc, char **argv){
  theApp = new TRint("theApp",&argc,argv,NULL,0);
  TChain *DSTtree = new TChain("DSTtree");
  int startfile, endfile;
  TString series;
  if(theApp->Argc() == 2)
    {
      startfile = atoi(theApp->Argv(1));
      endfile = startfile;
      series = theApp->Argv(1);
      Readdatafile(DSTtree, startfile);
    }
  else if(theApp->Argc() == 3)
    {
      startfile = atoi(theApp->Argv(1));
      endfile = atoi(theApp->Argv(2));
      series = theApp->Argv(1);
      series += theApp->Argv(2);
      Readdatafile(DSTtree, startfile, endfile);
    }
  else{
    cout<<"Usage: ./DSTSelf startfile endfile "<<endl;
    cout<<"Usage: ./DSTSelf startfile "<<endl;
    return 0;
  }
  cout<<"startfile "<<startfile<<"\t endfile "<<endfile<<"  series "<<series<<endl;
  cout<<"======= Start Matching TPC and OD data ====="<<endl;      

  //  gSystem.Load("Alpha_SelfDST_dict.so")
  
  Int_t    runID               = -1;
  Int_t    tpc_eventID         = -1;
  Int_t    tpc_event_type      = -1; // 0 gamma, 1 neutron, -1 else                                                             
  Double_t tpc_gps_fine        = -1.; //clock cycles                                                                            
  Double_t tpc_gps_coarse      = -1.; //[s]                                                                                     
  Double_t tpc_s1_start_time   = -1.; //[us]                                                                                    
  Double_t tpc_total_s1        = -1.; //[PE]                                                                                    
  Double_t tpc_total_f90       = -1.;
  Double_t tpc_t_drift         = -1.; //[us]                                                                                    
  Double_t tpc_s1_late         = -1.; //[PE]                                                                                    
  Int_t    tpc_npulses         = -1;
  Double_t tpc_timestamp       = -1;  //[us]    
  Int_t    number_of_match_od_events = -1;
  
  DSTtree->SetBranchAddress("runID",             &runID);
  DSTtree->SetBranchAddress("tpc_eventID",       &tpc_eventID);
  DSTtree->SetBranchAddress("tpc_event_type",    &tpc_event_type);
  DSTtree->SetBranchAddress("tpc_gps_fine",      &tpc_gps_fine);
  DSTtree->SetBranchAddress("tpc_gps_coarse",    &tpc_gps_coarse);
  DSTtree->SetBranchAddress("tpc_s1_start_time", &tpc_s1_start_time);
  DSTtree->SetBranchAddress("tpc_total_s1",      &tpc_total_s1);
  DSTtree->SetBranchAddress("tpc_total_f90",     &tpc_total_f90);
  DSTtree->SetBranchAddress("tpc_t_drift",       &tpc_t_drift);
  DSTtree->SetBranchAddress("tpc_s1_late",       &tpc_s1_late);
  DSTtree->SetBranchAddress("tpc_npulses",       &tpc_npulses);
  DSTtree->SetBranchAddress("tpc_timestamp",     &tpc_timestamp);
  DSTtree->SetBranchAddress("number_of_match_od_events",  &number_of_match_od_events);
  
  /*  Int_t od_eventID       = -1;
  Int_t od_nclusters     = -1;
  Double_t od_gps_fine   = -1.;
  Double_t od_gps_coarse = -1.;
  Double_t od_timestamp  = -1.;
  Double_t od_wt_charge  = -1.;

  vector<double>  *od_cluster_charge;
  vector<double>  *od_cluster_start;
  vector<double>  *od_cluster_height;
  vector<double>  *od_cluster_multiplicity;
  vector<int>     *od_cluster_pass_multcut;
  vector<double>  *od_cluster_dtprompt;

  od_cluster_charge = 0;
  od_cluster_start = 0;
  od_cluster_height = 0;
  od_cluster_multiplicity = 0;
  od_cluster_pass_multcut = 0;
  od_cluster_dtprompt = 0;

  DSTtree->SetBranchAddress("od_eventID",&od_eventID);
  DSTtree->SetBranchAddress("od_gps_fine",&od_gps_fine);
  DSTtree->SetBranchAddress("od_gps_coarse",&od_gps_coarse);
  DSTtree->SetBranchAddress("od_timestamp", &od_timestamp);
  DSTtree->SetBranchAddress("od_nclusters", &od_nclusters);
  DSTtree->SetBranchAddress("od_wt_charge", &od_wt_charge);
  DSTtree->SetBranchAddress("od_cluster_charge", &od_cluster_charge);
  DSTtree->SetBranchAddress("od_cluster_start", &od_cluster_start); // time in ns                                                  
  DSTtree->SetBranchAddress("od_cluster_height", &od_cluster_height);
  DSTtree->SetBranchAddress("od_cluster_multiplicity", &od_cluster_multiplicity);
  DSTtree->SetBranchAddress("od_cluster_pass_multcut", &od_cluster_pass_multcut);
  DSTtree->SetBranchAddress("od_cluster_dtprompt", &od_cluster_dtprompt);
  */

  std::vector<VetoEvent> *ODEvent =  new std::vector<VetoEvent> ;
  ODEvent = 0;
  DSTtree->SetBranchAddress("ODEvent", &ODEvent);

  int Entries = DSTtree->GetEntries();
  cout<<"Entries= "<<Entries<<endl;

  //===================Create New Histograms========================  
  double prompt_time = 2.e+4; 
  double middle_time = 0;
  double delay_time = 6.e+4; 
  double first_time = 2.e+4;
  double after_time = 2.e+4;
  double late_time = 1.e+5;
  double end_time = 1.4e+5;
  /*  double alpha_time = 1.e+3;
  double alpha_delay_time = 2.e+4; 
  */

  double window1start = 3.e+4;
  double window1end = 7.e+4;
  double window2start = 4.e+4;
  double window2end = 8.e+4;

  int gamma_bins = 1000;
  int gamma_gps_bins = 5000;
  double gamma_coin_ene = 5.e+3;
  int neutron_bins = 1000;
  int neutron_gps_bins = 5000;
  double neutron_coin_ene = 5.e+3;  
  
  double pos1 = 200.;
  double pos2 = 350.;
  double pos3 = 0.;
  double pos4 = 50.;

  TH1F* tpc_total_s1_hist = new TH1F("tpc_total_s1_hist","tpc total s1;Energy [PE]",200,0,40000);
  TH1F* tpc_s1_late_hist = new TH1F("tpc_s1_late_hist","tpc s1 late;Energy [PE]",200,0,25000);
  TH1F* tpc_s1_starttime_hist = new TH1F("tpc_s1_starttime_hist", "s1 start Time", 5000, -10., 10.);
  TH1F* tpc_total_f90_hist = new TH1F("tpc_total_f90_hist", "F90 Distribution", 110, 0, 1.3);
  TH2F* tpc_total_s1_f90_hist = new TH2F("tpc_total_s1_f90_hist", "F90 vs S1; S1 [PE]; F90", 10000, 0, 10000, 130, 0, 1.3);

  TH1F* tpc_gamma_total_s1_hist = new TH1F("tpc_gamma_total_s1_hist","tpc gamma total s1;Energy [PE]",200,0,40000);
  TH1F* tpc_gamma_s1_late_hist = new TH1F("tpc_gamma_s1_late_hist","tpc gamma s1 late;Energy [PE]",200,0,25000);

  TH1F* tpc_neutron_total_s1_hist = new TH1F("tpc_neutron_total_s1_hist","tpc neutron total s1;Energy [PE]",200,0,1000);
  TH1F* tpc_neutron_s1_late_hist = new TH1F("tpc_neutron_s1_late_hist","tpc neutron s1 late;Energy [PE]",100,0,500);

  TH1F* tpc_gamma_gps_hist = new TH1F("tpc_gamma_gps_hist","TPC Gamma Time;Time [ns]",1000,0,1.e+4); 
  TH1F* tpc_gamma_ene_hist = new TH1F("tpc_gamma_ene_hist","TPC Gamma Energy;Energy [PE]",1000,0,1.e+4);
  TH2F* tpc_gamma_gps_ene_hist = new TH2F("tpc_gamma_gps_ene_hist","TPC Gamma Time Vs Energy;Time [ns];Energy [PE]",1000,0,1.e+4,1000,0,1.e+4);
  TNtuple* tpc_gamma_ntuple = new TNtuple("tpc_gamma_ntuple","TPC Gamma Data","time:ene");

  /////===============All OD clusters================================================
  double fail_ene = 500; //pe
  int fail_bins = 250;

  TH2F* nv_all_ene_s1_hist = new TH2F("nv_all_ene_s1_hist","All Clusters Veto Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",500,0,1.e+4,200,0,40000);  
  TH1F* nv_all_gps_hist = new TH1F("nv_all_gps_hist","All Clusters Veto Time;Time [ns]",1000,middle_time,end_time);
  TH1F* nv_all_ene_hist = new TH1F("nv_all_ene_hist","All Clusters Veto Energy;Energy [PE]",500,0,1.e+4);
  TH1F* nv_all_small_ene_hist = new TH1F("nv_all_small_ene_hist","All Clusters Veto Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_all_gps_ene_hist = new TH2F("nv_all_gps_ene_hist","All ClustersVeto Time Vs Energy;Time [ns];Energy[PE]",1000,middle_time,end_time,500,0,1.e+4);
  TNtuple* nv_all_ntuple = new TNtuple("nv_all_ntuple","All Clusters Veto Data","total_s1:time:ene:height:mult");

  TH2F* nv_all_charge_height_multiplicity_hist = new TH2F("nv_all_charge_height_multiplicity_hist","Veto: height/multiplicity Vs Charge;od_cluster_charge[PE];height/multicut",1000,0,1000,10000,0,2.e+8);
  
  TH2F* nv_all_gamma_coincidence_ene_s1_hist = new TH2F("nv_all_gamma_coincidence_ene_s1_hist","All Clusters Veto Gamma Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_all_gamma_coincidence_gps_hist = new TH1F("nv_all_gamma_coincidence_gps_hist","All Clusters Veto Gamma Coincidence Time;Time [ns]",gamma_bins,prompt_time,delay_time);
  TH1F* nv_all_gamma_coincidence_ene_hist = new TH1F("nv_all_gamma_coincidence_ene_hist","All Clusters Veto Gamma Coincidence Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_all_gamma_coincidence_small_ene_hist = new TH1F("nv_all_gamma_coincidence_small_ene_hist","All Clusters Veto Gamma Coincidence Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_all_gamma_coincidence_gps_ene_hist = new TH2F("nv_all_gamma_coincidence_gps_ene_hist","All Clusters Veto Gamma Coincidence Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,prompt_time,delay_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_all_gamma_coincidence_ntuple = new TNtuple("nv_all_gamma_coincidence_ntuple","All Clusters Veto Gamma Coincidence Data","total_s1:time:ene:height:mult");

  TH2F* nv_all_neutron_coincidence_ene_s1_hist = new TH2F("nv_all_neutron_coincidence_ene_s1_hist","All Clusters Veto Neutron Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,40000);  
  TH1F* nv_all_neutron_coincidence_gps_hist = new TH1F("nv_all_neutron_coincidence_gps_hist","All Clusters Veto Neutron Coincidence Time;Time [ns]",neutron_bins,prompt_time,delay_time);
  TH1F* nv_all_neutron_coincidence_ene_hist = new TH1F("nv_all_neutron_coincidence_ene_hist","All Clusters Veto Neutron Coincidence Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_all_neutron_coincidence_small_ene_hist = new TH1F("nv_all_neutron_coincidence_small_ene_hist","All Clusters Veto Neutron Coincidence Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_all_neutron_coincidence_gps_ene_hist = new TH2F("nv_all_neutron_coincidence_gps_ene_hist","All Clusters Veto Neutron Coincidence Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,prompt_time,delay_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_all_neutron_coincidence_ntuple = new TNtuple("nv_all_neutron_coincidence_ntuple","All Clusters Veto Neutron Coincidence Data","total_s1:time:ene:height:mult");

  /////===============Failing The Multiplicity cut events================================================
  TH2F* nv_fail_ene_s1_hist = new TH2F("nv_fail_ene_s1_hist","Fail Multicut Veto Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",500,0,fail_ene,200,0,40000);  
  TH1F* nv_fail_gps_hist = new TH1F("nv_fail_gps_hist","Fail Multicut Veto Time;Time [ns]",1000,middle_time,end_time);
  TH1F* nv_fail_ene_hist = new TH1F("nv_fail_ene_hist","Fail Multicut Veto Energy;Energy [PE]",500,0,fail_ene);
  TH1F* nv_fail_small_ene_hist = new TH1F("nv_fail_small_ene_hist","Fail Multicut Veto Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_fail_gps_ene_hist = new TH2F("nv_fail_gps_ene_hist","Fail MulticutVeto Time Vs Energy;Time [ns];Energy[PE]",1000,middle_time,end_time,500,0,fail_ene);
  TNtuple* nv_fail_ntuple = new TNtuple("nv_fail_ntuple","Fail Multicut Veto Data","total_s1:time:ene:height:mult");
  
  TH2F* nv_fail_gamma_coincidence_ene_s1_hist = new TH2F("nv_fail_gamma_coincidence_ene_s1_hist","Fail Multicut Veto Gamma Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,fail_ene,200,0,40000);  
  TH1F* nv_fail_gamma_coincidence_gps_hist = new TH1F("nv_fail_gamma_coincidence_gps_hist","Fail Multicut Veto Gamma Coincidence Time;Time [ns]",gamma_bins,prompt_time,delay_time);
  TH1F* nv_fail_gamma_coincidence_ene_hist = new TH1F("nv_fail_gamma_coincidence_ene_hist","Fail Multicut Veto Gamma Coincidence Energy;Energy [PE]",gamma_bins,0,fail_ene);
  TH1F* nv_fail_gamma_coincidence_small_ene_hist = new TH1F("nv_fail_gamma_coincidence_small_ene_hist","Fail Multicut Veto Gamma Coincidence Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_fail_gamma_coincidence_gps_ene_hist = new TH2F("nv_fail_gamma_coincidence_gps_ene_hist","Fail Multicut Veto Gamma Coincidence Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,prompt_time,delay_time,gamma_bins,0,fail_ene);
  TNtuple* nv_fail_gamma_coincidence_ntuple = new TNtuple("nv_fail_gamma_coincidence_ntuple","Fail Multicut Veto Gamma Coincidence Data","total_s1:time:ene:height:mult");

  TH2F* nv_fail_neutron_coincidence_ene_s1_hist = new TH2F("nv_fail_neutron_coincidence_ene_s1_hist","Fail Multicut Veto Neutron Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,fail_ene,200,0,40000);  
  TH1F* nv_fail_neutron_coincidence_gps_hist = new TH1F("nv_fail_neutron_coincidence_gps_hist","Fail Multicut Veto Neutron Coincidence Time;Time [ns]",neutron_bins,prompt_time,delay_time);
  TH1F* nv_fail_neutron_coincidence_ene_hist = new TH1F("nv_fail_neutron_coincidence_ene_hist","Fail Multicut Veto Neutron Coincidence Energy;Energy [PE]",neutron_bins,0,fail_ene);
  TH1F* nv_fail_neutron_coincidence_small_ene_hist = new TH1F("nv_fail_neutron_coincidence_small_ene_hist","Fail Multicut Veto Neutron_Coincidence Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_fail_neutron_coincidence_gps_ene_hist = new TH2F("nv_fail_neutron_coincidence_gps_ene_hist","Fail Multicut Veto Neutron Coincidence Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,prompt_time,delay_time,neutron_bins,0,fail_ene);
  TNtuple* nv_fail_neutron_coincidence_ntuple = new TNtuple("nv_fail_neutron_coincidence_ntuple","Fail Multicut Veto Neutron Coincidence Data","total_s1:time:ene:height:mult");

  /////===============Passing The Multiplicity cut events================================================

  TH2F* nv_ene_s1_hist = new TH2F("nv_ene_s1_hist","Veto Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",500,0,1.e+4,200,0,40000);  
  TH1F* nv_gps_hist = new TH1F("nv_gps_hist","Veto Time;Time [ns]",1000,middle_time,end_time);
  TH1F* nv_ene_hist = new TH1F("nv_ene_hist","Veto Energy;Energy [PE]",500,0,1.e+4);
  TH1F* nv_small_ene_hist = new TH1F("nv_small_ene_hist","Veto Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gps_ene_hist = new TH2F("nv_gps_ene_hist","Veto Time Vs Energy;Time [ns];Energy[PE]",1000,middle_time,end_time,500,0,1.e+4);
  TNtuple* nv_ntuple = new TNtuple("nv_ntuple","Veto Data","total_s1:time:ene:dtprompt:height:mult");

  TH2F* nv_late_ene_s1_hist = new TH2F("nv_late_ene_s1_hist","Veto Late Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",500,0,1.e+4,200,0,40000);  
  TH1F* nv_late_gps_hist = new TH1F("nv_late_gps_hist","Veto Late Time;Time [ns]",gamma_bins,late_time,end_time);
  TH1F* nv_late_ene_hist = new TH1F("nv_late_ene_hist","Veto Late Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_late_small_ene_hist = new TH1F("nv_late_small_ene_hist","Veto Late Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_late_gps_ene_hist = new TH2F("nv_late_gps_ene_hist","Veto Late Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,late_time,end_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_late_ntuple = new TNtuple("nv_late_ntuple","Veto Late Data","total_s1:time:ene:height:mult");

  TH2F* nv_charge_height_multiplicity_hist = new TH2F("nv_charge_height_multiplicity_hist","Veto: height/multiplicity Vs Charge;od_cluster_charge[PE];height/multicut",1000,0,1000,10000,0,2.e+8);

  //===============Define Gamma Coincidence Plots in Veto==============================================
 
  TH1F* nv_gamma_full_ene_hist = new TH1F("nv_gamma_full_ene_hist","Veto Gamma Full Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_full_small_ene_hist = new TH1F("nv_gamma_full_small_ene_hist","Veto Gamma Full Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TNtuple* nv_gamma_full_ntuple = new TNtuple("nv_gamma_full_ntuple","Veto Gamma Full Data","total_s1:time:ene:dtprompt:height:mult");  
  TNtuple* nv_gamma_full_coincidence_ntuple = new TNtuple("nv_gamma_full_coincidence_ntuple","Veto Gamma Full Coincidence Data","total_s1:time:ene:dtprompt:height:mult");  

  TH2F* nv_gamma_ene_s1_hist = new TH2F("nv_gamma_ene_s1_hist","Veto Gamma Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  

  TH2F* nv_gamma_coincidence_ene_s1_hist = new TH2F("nv_gamma_coincidence_ene_s1_hist","Veto Gamma Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_coincidence_gps_hist = new TH1F("nv_gamma_coincidence_gps_hist","Veto Gamma Coincidence Time;Time [ns]",gamma_bins,middle_time,end_time);
  TH1F* nv_gamma_coincidence_ene_hist = new TH1F("nv_gamma_coincidence_ene_hist","Veto Gamma Coincidence Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_coincidence_small_ene_hist = new TH1F("nv_gamma_coincidence_small_ene_hist","Veto Gamma Coincidence Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_coincidence_gps_ene_hist = new TH2F("nv_gamma_coincidence_gps_ene_hist","Veto Gamma Coincidence Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,middle_time,end_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_coincidence_ntuple = new TNtuple("nv_gamma_coincidence_ntuple","Veto Gamma Coincidence Data","total_s1:time:ene:height:mult");  

  TH2F* nv_gamma_prompt_ene_s1_hist = new TH2F("nv_gamma_prompt_ene_s1_hist","Veto Gamma Prompt Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
 TH1F* nv_gamma_prompt_gps_hist = new TH1F("nv_gamma_prompt_gps_hist","Veto Gamma Prompt Time;Time [ns]",100,middle_time,prompt_time);
  TH1F* nv_gamma_prompt_ene_hist = new TH1F("nv_gamma_prompt_ene_hist","Veto Gamma Prompt Energy;Energy [PE]",100,0,gamma_coin_ene);
  TH1F* nv_gamma_prompt_small_ene_hist = new TH1F("nv_gamma_prompt_small_ene_hist","Veto Gamma Prompt Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_prompt_gps_ene_hist = new TH2F("nv_gamma_prompt_gps_ene_hist","Veto Gamma Prompt Time Vs Energy;Time [ns];Energy[PE]",100,middle_time,prompt_time,100,0,gamma_coin_ene);
  TNtuple* nv_gamma_prompt_ntuple = new TNtuple("nv_gamma_prompt_ntuple","Veto Gamma Prompt Data","total_s1:time:ene:height:mult");
  
  TH2F* nv_gamma_delay_ene_s1_hist = new TH2F("nv_gamma_delay_ene_s1_hist","Veto Gamma Delay Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_delay_gps_hist = new TH1F("nv_gamma_delay_gps_hist","Veto Gamma Delay Time;Time [ns]",gamma_bins,middle_time,delay_time);
  TH1F* nv_gamma_delay_ene_hist = new TH1F("nv_gamma_delay_ene_hist","Veto Gamma Delay Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_delay_small_ene_hist = new TH1F("nv_gamma_delay_small_ene_hist","Veto Gamma Delay Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_gamma_delay_gps_ene_hist = new TH2F("nv_gamma_delay_gps_ene_hist","Veto Gamma Delay Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,middle_time,delay_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_delay_ntuple = new TNtuple("nv_gamma_delay_ntuple","Veto Gamma Delay Data","total_s1:time:ene:height:mult");

  TH2F* nv_gamma_after_ene_s1_hist = new TH2F("nv_gamma_after_ene_s1_hist","Veto Gamma After Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_after_gps_hist = new TH1F("nv_gamma_after_gps_hist","Veto Gamma After Time;Time [ns]",gamma_bins,after_time,delay_time);
  TH1F* nv_gamma_after_ene_hist = new TH1F("nv_gamma_after_ene_hist","Veto Gamma After Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_after_small_ene_hist = new TH1F("nv_gamma_after_small_ene_hist","Veto Gamma After Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_gamma_after_gps_ene_hist = new TH2F("nv_gamma_after_gps_ene_hist","Veto Gamma After Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,after_time,delay_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_after_ntuple = new TNtuple("nv_gamma_after_ntuple","Veto Gamma After Data","total_s1:time:ene:height:mult");

  int gamma_first_bins = 200;
  TH2F* nv_gamma_first_ene_s1_hist = new TH2F("nv_gamma_first_ene_s1_hist","Veto Gamma First Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_first_gps_hist = new TH1F("nv_gamma_first_gps_hist","Veto Gamma First Time;Time [ns]",gamma_first_bins,first_time,delay_time);
  TH1F* nv_gamma_first_ene_hist = new TH1F("nv_gamma_first_ene_hist","Veto Gamma First Energy;Energy [PE]",gamma_first_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_first_small_ene_hist = new TH1F("nv_gamma_first_small_ene_hist","Veto First Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_first_gps_ene_hist = new TH2F("nv_gamma_first_gps_ene_hist","Veto Gamma First Time Vs Energy;Time [ns];Energy[PE]",gamma_first_bins,first_time,delay_time,gamma_first_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_first_alpha_gps_hist = new TH1F("nv_gamma_first_alpha_gps_hist","Veto Gamma First Alpha Only Time;Time [ns]",300,first_time,window2end);//delay_time);
  TH1F* nv_gamma_first_r_gps_hist = new TH1F("nv_gamma_first_r_gps_hist","Veto Gamma First Alpha+gamma Time;Time [ns]",300,first_time,window2end);//delay_time);    
  TNtuple* nv_gamma_first_ntuple = new TNtuple("nv_gamma_first_ntuple","Veto Gamma First Data","total_s1:time:ene:height:mult");

  TH2F* nv_gamma_late_ene_s1_hist = new TH2F("nv_gamma_late_ene_s1_hist","Veto Gamma Late Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_late_gps_hist = new TH1F("nv_gamma_late_gps_hist","Veto Gamma Late Time;Time [ns]",gamma_bins,late_time,end_time);
  TH1F* nv_gamma_late_ene_hist = new TH1F("nv_gamma_late_ene_hist","Veto Gamma Late Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_late_small_ene_hist = new TH1F("nv_gamma_late_small_ene_hist","Veto Gamma Late Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_gamma_late_gps_ene_hist = new TH2F("nv_gamma_late_gps_ene_hist","Veto Gamma Late Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,late_time,end_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_late_ntuple = new TNtuple("nv_gamma_late_ntuple","Veto Gamma Late Data","total_s1:time:ene:height:mult");

  TH1F* nv_gamma_window1_first_gps_hist = new TH1F("nv_gamma_window1_first_gps_hist","Veto Gamma Window1 First Time;Time [ns]",gamma_first_bins,window1start,window2end);
  TH1F* nv_gamma_window1_first_ene_hist = new TH1F("nv_gamma_window1_first_ene_hist","Veto Gamma Window1 First Energy;Energy [PE]",gamma_first_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_window1_first_small_ene_hist = new TH1F("nv_gamma_window1_first_small_ene_hist","Veto Window1 First Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_window1_first_gps_ene_hist = new TH2F("nv_gamma_window1_first_gps_ene_hist","Veto Gamma Window1 First Time Vs Energy;Time [ns];Energy[PE]",gamma_first_bins,window1start,window1end,gamma_first_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_window1_first_alpha_gps_hist = new TH1F("nv_gamma_window1_first_alpha_gps_hist","Veto Gamma window1 First Alpha Only Time;Time [ns]",gamma_first_bins,window1start,window1end);
  TH1F* nv_gamma_window1_first_r_gps_hist = new TH1F("nv_gamma_window1_first_r_gps_hist","Veto Gamma window1 First Alpha+gamma Time;Time [ns]",gamma_first_bins,window1start,window1end);
  //  TNtuple* nv_gamma_window_first_ntuple = new TNtuple("nv_gamma_window_first_ntuple","Veto Gamma Window_First Data","total_s1:time:ene");
  TNtuple* nv_gamma_window1_first_ntuple = new TNtuple("nv_gamma_window1_first_ntuple","Veto Gamma Window1 First Data","time:ene:height:mult");

  TH1F* nv_gamma_window2_first_gps_hist = new TH1F("nv_gamma_window2_first_gps_hist","Veto Gamma Window2 First Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TH1F* nv_gamma_window2_first_ene_hist = new TH1F("nv_gamma_window2_first_ene_hist","Veto Gamma Window2 First Energy;Energy [PE]",gamma_first_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_window2_first_small_ene_hist = new TH1F("nv_gamma_window2_first_small_ene_hist","Veto Window2 First Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_window2_first_gps_ene_hist = new TH2F("nv_gamma_window2_first_gps_ene_hist","Veto Gamma Window2 First Time Vs Energy;Time [ns];Energy[PE]",gamma_first_bins,window2start,window2end,gamma_first_bins,0,gamma_coin_ene);
  //  TNtuple* nv_gamma_window_first_ntuple = new TNtuple("nv_gamma_window_first_ntuple","Veto Gamma Window_First Data","total_s1:time:ene");
  TH1F* nv_gamma_window2_first_alpha_gps_hist = new TH1F("nv_gamma_window2_first_alpha_gps_hist","Veto Gamma window2 First Alpha Only Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TH1F* nv_gamma_window2_first_r_gps_hist = new TH1F("nv_gamma_window2_first_r_gps_hist","Veto Gamma window2First Alpha+gamma Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TNtuple* nv_gamma_window2_first_ntuple = new TNtuple("nv_gamma_window2_first_ntuple","Veto Gamma Window2 First Data","time:ene:height:mult");


  //=====================Define Neutron coincidence Events in Veto==============================================

  TH1F* nv_neutron_full_ene_hist = new TH1F("nv_neutron_full_ene_hist","Veto Neutron Full Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_neutron_full_small_ene_hist = new TH1F("nv_neutron_full_small_ene_hist","Veto Neutron Full Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TNtuple* nv_neutron_full_ntuple = new TNtuple("nv_neutron_full_ntuple","Veto Neutron Full Data","total_s1:time:ene:dtprompt:height:mult");  
  TNtuple* nv_neutron_full_coincidence_ntuple = new TNtuple("nv_neutron_full_coincidece_ntuple","Veto Neutron Full Coincidence Data","total_s1:time:ene:dtprompt:height:mult");  

  TH2F* nv_neutron_ene_s1_hist = new TH2F("nv_neutron_ene_s1_hist","Veto Neutron Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  

  TH2F* nv_neutron_coincidence_ene_s1_hist = new TH2F("nv_neutron_coincidence_ene_s1_hist","Veto Neutron Coincidence Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
  TH1F* nv_neutron_coincidence_gps_hist = new TH1F("nv_neutron_coincidence_gps_hist","Veto Neutron Coincidence Time;Time [ns]",neutron_bins,middle_time,end_time);
  TH1F* nv_neutron_coincidence_ene_hist = new TH1F("nv_neutron_coincidence_ene_hist","Veto Neutron Coincidence Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_coincidence_small_ene_hist = new TH1F("nv_neutron_coincidence_small_ene_hist","Veto Neutron Coincidence Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_coincidence_gps_ene_hist = new TH2F("nv_neutron_coincidence_gps_ene_hist","Veto Neutron Coincidence Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,middle_time,end_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_coincidence_ntuple = new TNtuple("nv_neutron_coincidence_ntuple","Veto Neutron Coincidence Data","total_s1:time:ene:height:mult");  

  TH2F* nv_neutron_prompt_ene_s1_hist = new TH2F("nv_neutron_prompt_ene_s1_hist","Veto Neutron Prompt Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
  TH1F* nv_neutron_prompt_gps_hist = new TH1F("nv_neutron_prompt_gps_hist","Veto Neutron Prompt Time;Time [ns]",100,middle_time,prompt_time);
  TH1F* nv_neutron_prompt_ene_hist = new TH1F("nv_neutron_prompt_ene_hist","Veto Neutron Prompt Energy;Energy [PE]",100,0,neutron_coin_ene);
  TH1F* nv_neutron_prompt_small_ene_hist = new TH1F("nv_neutron_prompt_small_ene_hist","Veto Neutron Prompt Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_prompt_gps_ene_hist = new TH2F("nv_neutron_prompt_gps_ene_hist","Veto Neutron Prompt Time Vs Energy;Time [ns];Energy[PE]",100,middle_time,prompt_time,100,0,neutron_coin_ene);
  TNtuple* nv_neutron_prompt_ntuple = new TNtuple("nv_neutron_prompt_ntuple","Veto Neutron Prompt Data","total_s1:time:ene:height:mult");
  
  TH2F* nv_neutron_delay_ene_s1_hist = new TH2F("nv_neutron_delay_ene_s1_hist","Veto Neutron Delay Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
 TH1F* nv_neutron_delay_gps_hist = new TH1F("nv_neutron_delay_gps_hist","Veto Neutron Delay Time;Time [ns]",neutron_bins,middle_time,delay_time);
  TH1F* nv_neutron_delay_ene_hist = new TH1F("nv_neutron_delay_ene_hist","Veto Neutron Delay Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_delay_small_ene_hist = new TH1F("nv_neutron_delay_small_ene_hist","Veto Neutron Delay Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_neutron_delay_gps_ene_hist = new TH2F("nv_neutron_delay_gps_ene_hist","Veto Neutron Delay Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,middle_time,delay_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_delay_ntuple = new TNtuple("nv_neutron_delay_ntuple","Veto Neutron Delay Data","total_s1:time:ene:height:mult");
  
  TH2F* nv_neutron_after_ene_s1_hist = new TH2F("nv_neutron_after_ene_s1_hist","Veto Neutron After Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
  TH1F* nv_neutron_after_gps_hist = new TH1F("nv_neutron_after_gps_hist","Veto Neutron After Time;Time [ns]",neutron_bins,after_time,delay_time);
  TH1F* nv_neutron_after_ene_hist = new TH1F("nv_neutron_after_ene_hist","Veto Neutron After Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_after_small_ene_hist = new TH1F("nv_neutron_after_small_ene_hist","Veto Neutron After Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_neutron_after_gps_ene_hist = new TH2F("nv_neutron_after_gps_ene_hist","Veto Neutron After Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,after_time,delay_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_after_ntuple = new TNtuple("nv_neutron_after_ntuple","Veto Neutron After Data","total_s1:time:ene:height:mult");

  int neutron_first_bins = 200;
  TH2F* nv_neutron_first_ene_s1_hist = new TH2F("nv_neutron_first_ene_s1_hist","Veto Neutron First Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
  TH1F* nv_neutron_first_gps_hist = new TH1F("nv_neutron_first_gps_hist","Veto Neutron First Time;Time [ns]",neutron_first_bins,first_time,delay_time);
  TH1F* nv_neutron_first_ene_hist = new TH1F("nv_neutron_first_ene_hist","Veto Neutron First Energy;Energy [PE]",neutron_first_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_first_small_ene_hist = new TH1F("nv_neutron_first_small_ene_hist","Veto Neutron first Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_first_gps_ene_hist = new TH2F("nv_neutron_first_gps_ene_hist","Veto Neutron First Time Vs Energy;Time [ns];Energy[PE]",neutron_first_bins,first_time,delay_time,neutron_first_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_first_alpha_gps_hist = new TH1F("nv_neutron_first_alpha_gps_hist","Veto Neutron First Alpha Only Time;Time [ns]",300,first_time,window2end);//delay_time);
  TH1F* nv_neutron_first_r_gps_hist = new TH1F("nv_neutron_first_r_gps_hist","Veto Neutron First Alpha+neutron Time;Time [ns]",300,first_time,window2end);//delay_time);    
  TNtuple* nv_neutron_first_ntuple = new TNtuple("nv_neutron_first_ntuple","Veto Neutron First Data","total_s1:time:ene:height:mult");

  TH2F* nv_neutron_late_ene_s1_hist = new TH2F("nv_neutron_late_ene_s1_hist","Veto Neutron Late Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,25000);  
  TH1F* nv_neutron_late_gps_hist = new TH1F("nv_neutron_late_gps_hist","Veto Neutron Late Time;Time [ns]",neutron_bins,late_time,end_time);
  TH1F* nv_neutron_late_ene_hist = new TH1F("nv_neutron_late_ene_hist","Veto Neutron Late Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_late_small_ene_hist = new TH1F("nv_neutron_late_small_ene_hist","Veto Neutron Late Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_neutron_late_gps_ene_hist = new TH2F("nv_neutron_late_gps_ene_hist","Veto Neutron Late Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,late_time,end_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_late_ntuple = new TNtuple("nv_neutron_late_ntuple","Veto Neutron Late Data","total_s1:time:ene:height:mult");

  TH1F* nv_neutron_window1_first_gps_hist = new TH1F("nv_neutron_window1_first_gps_hist","Veto Neutron Window1 First Time;Time [ns]",gamma_first_bins,window1start,window2end);
  TH1F* nv_neutron_window1_first_ene_hist = new TH1F("nv_neutron_window1_first_ene_hist","Veto Neutron Window1 First Energy;Energy [PE]",gamma_first_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_window1_first_small_ene_hist = new TH1F("nv_neutron_window1_first_small_ene_hist","Veto Window1 First Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_window1_first_gps_ene_hist = new TH2F("nv_neutron_window1_first_gps_ene_hist","Veto Neutron Window1 First Time Vs Energy;Time [ns];Energy[PE]",gamma_first_bins,window1start,window1end,gamma_first_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_window1_first_alpha_gps_hist = new TH1F("nv_neutron_window1_first_alpha_gps_hist","Veto Neutron window1 First Alpha Only Time;Time [ns]",gamma_first_bins,window1start,window1end);
  TH1F* nv_neutron_window1_first_r_gps_hist = new TH1F("nv_neutron_window1_first_r_gps_hist","Veto Neutron window1 First Alpha+neutron Time;Time [ns]",gamma_first_bins,window1start,window1end);
  //  TNtuple* nv_neutron_window_first_ntuple = new TNtuple("nv_neutron_window_first_ntuple","Veto Neutron Window_First Data","total_s1:time:ene");
  TNtuple* nv_neutron_window1_first_ntuple = new TNtuple("nv_neutron_window1_first_ntuple","Veto Neutron Window1 First Data","time:ene:height:mult");

  TH1F* nv_neutron_window2_first_gps_hist = new TH1F("nv_neutron_window2_first_gps_hist","Veto Neutron Window2 First Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TH1F* nv_neutron_window2_first_ene_hist = new TH1F("nv_neutron_window2_first_ene_hist","Veto Neutron Window2 First Energy;Energy [PE]",gamma_first_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_window2_first_small_ene_hist = new TH1F("nv_neutron_window2_first_small_ene_hist","Veto Window2 First Energy(small range);Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_window2_first_gps_ene_hist = new TH2F("nv_neutron_window2_first_gps_ene_hist","Veto Neutron Window2 First Time Vs Energy;Time [ns];Energy[PE]",gamma_first_bins,window2start,window2end,gamma_first_bins,0,neutron_coin_ene);
  //  TNtuple* nv_neutron_window_first_ntuple = new TNtuple("nv_neutron_window_first_ntuple","Veto Neutron Window_First Data","total_s1:time:ene");
  TH1F* nv_neutron_window2_first_alpha_gps_hist = new TH1F("nv_neutron_window2_first_alpha_gps_hist","Veto Neutron window2 First Alpha Only Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TH1F* nv_neutron_window2_first_r_gps_hist = new TH1F("nv_neutron_window2_first_r_gps_hist","Veto Neutron window2First Alpha+gamma Time;Time [ns]",gamma_first_bins,window2start,window2end);
  TNtuple* nv_neutron_window2_first_ntuple = new TNtuple("nv_neutron_window2_first_ntuple","Veto Neutron Window2 First Data","time:ene:height:mult");

  ////**************end of Histograms definitions*******************************************

  double gamma_s1_cut = 20000; //pe
  double gamma_gps_cut = 20000; //ns
  double gamma_od_charge_cut = 500;
  double neutron_gps_cut = 20000; //ns
  double neutron_od_charge_cut = 500;
  double gamma_ene_cut = 500.;

  //=================Start Analysis Coincidence Events===========================
  for(int j=0; j<Entries; j++)
    {
      DSTtree->GetEntry(j);
      tpc_total_s1_hist->Fill(tpc_total_s1);
      tpc_s1_late_hist->Fill(tpc_s1_late);
      tpc_s1_starttime_hist->Fill(tpc_s1_start_time);
      tpc_total_f90_hist->Fill(tpc_total_f90);
      tpc_total_s1_f90_hist->Fill(tpc_total_s1,tpc_total_f90);
      if(tpc_event_type==0)  //select gamma
	{
	  tpc_gamma_total_s1_hist->Fill(tpc_total_s1);
	  tpc_gamma_s1_late_hist->Fill(tpc_s1_late);
	}
      else if(tpc_event_type==1)  //select neutron
	{
	  tpc_neutron_total_s1_hist->Fill(tpc_total_s1);
	  tpc_neutron_s1_late_hist->Fill(tpc_s1_late);
	}
      //      double gps_diff = (od_timestamp - tpc_timestamp)*1.e+3; //ns
      //      vector<double> lsv_gamma_ene,lsv_gamma_s1;
      // vector<double> lsv_neutron_gps, lsv_gamma_gps;
      //      vector<double> lsv_gamma_alpha_ene, lsv_gamma_alpha_gps, lsv_gamma_alpha_s1;
      //      vector<double> lsv_neutron_alpha_ene, lsv_neutron_alpha_gps, lsv_neutron_alpha_s1; 
      //      bool lsv_gamma_tag = false;
      // bool lsv_neutron_tag = false;
      //      vector<double> event_diff;
#ifdef closest_cluster  
      std::map<double, size_t> event_diff;
#endif
      vector<double> event_diff;
      vector<double> event_diff_idx;

      if(number_of_match_od_events>0 && ODEvent->size()==number_of_match_od_events){
      //**************************Start Loop Over the OD clusters**********************************************
      //  for(int ncluster=0; ncluster<od_nclusters; ncluster++)
      for(size_t i=0; i<ODEvent->size(); i++)
	{ 	  	 	  
	  event_diff.push_back((ODEvent->at(i).od_tpc_timestamp_diff)*1.e+3);
	  event_diff_idx.push_back((ODEvent->at(i).od_tpc_timestamp_diff)*1.e+3);
	}
      if(event_diff.size())
	{
	  if(event_diff.size()>1)
	    { sort(event_diff.begin(),event_diff.end(),Compare);
	      i = idx_find(event_diff_idx,event_diff.front());
	    }
	  else  i = 0;

#ifdef closest_cluster  
	  //  event_diff.insert( {(ODEvent->at(i).od_tpc_timestamp_diff)*1.e+3,i} );
	  event_diff.insert(std::pair<double,size_t>((ODEvent->at(i).od_tpc_timestamp_diff)*1.e+3,i));
	  size_t k=event_diff.begin()->second;
	  cout<<"i= "<<k<<endl;
	}
      if(event_diff.size())
	{
	  if(event_diff.size()>1)
	    size_t i=map_idx(event_diff);
	  else size_t i=0;
	
	  cout<<"i "<<i<<endl;
#endif

	  //	  cout<<"i "<<i<<endl;
	  vector<double> lsv_neutron_gps, lsv_gamma_gps;
	  bool lsv_gamma_tag = false;
	  bool lsv_neutron_tag = false;
	  double gps_diff = (ODEvent->at(i).od_tpc_timestamp_diff)*1.e+3; //[ns]	  
	  //	  for(size_t ncluster=0; ncluster<ODEvent.at(i).od_cluster_charge.size(); ncluster++)
      //for(vector<double>::iterator it=ODEvent->at(i).od_cluster_charge.begin(); it!=ODEvent->at(i).od_cluster_charge.end(); it++)
	  int g=0;
	  int g1=0;
	  int g2=0;
	  int glate=0;
	  int n=0;
	  int n1=0;
	  int n2=0;
	  int nlate=0;
	  for(int ncluster=0; ncluster<ODEvent->at(i).od_nclusters; ncluster++)
	  {
	    if(ODEvent->at(i).od_cluster_charge.at(ncluster)>0) 
	      {
		  //*********************All OD cluster******************************************************************
		 
		//  double gps_all_diff_temp = gps_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;  //ns	  
		  double gps_all_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;  //ns	  
		  nv_all_gps_hist->Fill(gps_all_diff_temp);
		  nv_all_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		  nv_all_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		  nv_all_gps_ene_hist->Fill(gps_all_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
		  nv_all_ntuple->Fill(tpc_total_s1,gps_all_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		  nv_all_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
		  nv_all_charge_height_multiplicity_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster)/ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
	    	  if(tpc_event_type==0) //tpc gamma
		    {
		      nv_all_gamma_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
		      //     double gps_all_gamma_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;	 
		      double gps_all_gamma_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;	 
		      if(gps_all_gamma_diff_temp>prompt_time && gps_all_gamma_diff_temp<delay_time)
			{
			  nv_all_gamma_coincidence_gps_hist->Fill(gps_all_gamma_diff_temp);
			  nv_all_gamma_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_gamma_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_gamma_coincidence_gps_ene_hist->Fill(gps_all_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_gamma_coincidence_ntuple->Fill(tpc_total_s1,gps_all_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));  
			}		    
		    }
		  if(tpc_event_type==1) //tpc neutron
		    {
		      //  double gps_all_neutron_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;      
		      double gps_all_neutron_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3; 
		      nv_all_neutron_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
		      if(gps_all_neutron_diff_temp>prompt_time && gps_all_neutron_diff_temp<delay_time)
			{
			  nv_all_neutron_coincidence_gps_hist->Fill(gps_all_neutron_diff_temp);
			  nv_all_neutron_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_neutron_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_neutron_coincidence_gps_ene_hist->Fill(gps_all_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_all_neutron_coincidence_ntuple->Fill(tpc_total_s1,gps_all_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			}		    
		    } //end of all clusters
	      
		  //*********************Failing MultiCut cluster******************************************************************
		  if(ODEvent->at(i).od_cluster_pass_multcut.at(ncluster)==0)
		    {
		      //    double gps_fail_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;  //ns	  
		      double gps_fail_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;  //ns  
		      nv_fail_gps_hist->Fill(gps_fail_diff_temp);
		      nv_fail_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_fail_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_fail_gps_ene_hist->Fill(gps_fail_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_fail_ntuple->Fill(tpc_total_s1,gps_fail_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		      nv_fail_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
		      if(tpc_event_type==0)
			{
			  nv_fail_gamma_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  //		  double gps_fail_gamma_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;	    
			  double gps_fail_gamma_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;	    
			  if(gps_fail_gamma_diff_temp>prompt_time && gps_fail_gamma_diff_temp<delay_time)
			    {
			      nv_fail_gamma_coincidence_gps_hist->Fill(gps_fail_gamma_diff_temp);
			      nv_fail_gamma_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_gamma_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_gamma_coincidence_gps_ene_hist->Fill(gps_fail_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_gamma_coincidence_ntuple->Fill(tpc_total_s1,gps_fail_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster)); 
			    }		    
			}
		      if(tpc_event_type==1)
			{
			  //			  double gps_fail_neutron_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;    
			  double gps_fail_neutron_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;    
			  nv_fail_neutron_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  if(gps_fail_neutron_diff_temp>prompt_time && gps_fail_neutron_diff_temp<delay_time)
			    {
			      nv_fail_neutron_coincidence_gps_hist->Fill(gps_fail_neutron_diff_temp);
			      nv_fail_neutron_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_neutron_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_neutron_coincidence_gps_ene_hist->Fill(gps_fail_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_fail_neutron_coincidence_ntuple->Fill(tpc_total_s1,gps_fail_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	    
			    }		    
			}
		    }//end of failing multi cut 

		  //*********************Passing MultiCut cluster******************************************************************
		  if(ODEvent->at(i).od_cluster_pass_multcut.at(ncluster)==1)
		    {	
		      // double gps_diff_temp = gps_diff + ODEvent->at(i).od_cluster_start.at(ncluster)*1.e+3;  //ns	  
		      //  double gps_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;  //ns	  
		      double gps_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;  //ns	     
		      nv_gps_hist->Fill(gps_diff_temp);
		      nv_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_gps_ene_hist->Fill(gps_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
		      nv_ntuple->Fill(tpc_total_s1,gps_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3,ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		      nv_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
		      nv_charge_height_multiplicity_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster)/ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		  
		      if(gps_diff_temp<end_time && gps_diff_temp>late_time)
			{
			  nv_late_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_late_gps_hist->Fill(gps_diff_temp);
			  nv_late_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_late_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_late_gps_ene_hist->Fill(gps_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_late_ntuple->Fill(tpc_total_s1,gps_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	     
			}	      
		      if(tpc_event_type==0)
			{
			  nv_gamma_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  //	  double gps_gamma_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;	 
			  double gps_gamma_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;	 
			  lsv_gamma_gps.push_back(gps_gamma_diff_temp);
			  nv_gamma_full_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_full_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_full_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3,ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		   // if(gps_gamma_diff_temp<gamma_gps_cut && ODEvent->at(i).od_cluster_charge.at(ncluster)>gamma_od_charge_cut)
			  //lsv_gamma_tag = true;
		       if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<end_time)
			{
			  nv_gamma_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_coincidence_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			}		    
		      if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<prompt_time)
			{
			  nv_gamma_prompt_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_prompt_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_prompt_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<delay_time)
			{
			  nv_gamma_delay_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_delay_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_delay_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	  
			}
		      if(gps_gamma_diff_temp>after_time && gps_gamma_diff_temp<delay_time)
			{
			  nv_gamma_after_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_after_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_after_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>first_time && gps_gamma_diff_temp<delay_time)
			{ ++g;
			  if(g==1)
			    {
			      nv_gamma_first_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			      nv_gamma_first_gps_hist->Fill(gps_gamma_diff_temp);
			      nv_gamma_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));  
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_gamma_first_alpha_gps_hist->Fill(gps_gamma_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_gamma_first_r_gps_hist->Fill(gps_gamma_diff_temp);
			    }
			}
		      if(gps_gamma_diff_temp>window1start && gps_gamma_diff_temp<window1end)
			{ ++g1;
			  if(g1==1)
			    {
			      nv_gamma_window1_first_gps_hist->Fill(gps_gamma_diff_temp);
			      nv_gamma_window1_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window1_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window1_first_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window1_first_ntuple->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_gamma_window1_first_alpha_gps_hist->Fill(gps_gamma_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_gamma_window1_first_r_gps_hist->Fill(gps_gamma_diff_temp);
			    }
			}
		      if(gps_gamma_diff_temp>window2start && gps_gamma_diff_temp<window2end)
			{ ++g2;
			  if(g2==1)
			    {
			      nv_gamma_window2_first_gps_hist->Fill(gps_gamma_diff_temp);
			      nv_gamma_window2_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window2_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window2_first_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_window2_first_ntuple->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_gamma_window2_first_alpha_gps_hist->Fill(gps_gamma_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_gamma_window2_first_r_gps_hist->Fill(gps_gamma_diff_temp);
			    }
			}
		      

		      if(gps_gamma_diff_temp>late_time && gps_gamma_diff_temp<end_time)
			{ ++glate;
			  if(glate==1){
			  nv_gamma_late_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_late_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_late_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	    
			  }
			}
	
			}	      
		      if(tpc_event_type==1)
			{
			  nv_neutron_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  //	  double gps_neutron_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;      
			  double gps_neutron_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;      
			  lsv_neutron_gps.push_back(gps_neutron_diff_temp);
			  nv_neutron_full_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_full_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_full_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3,ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
		   //if(gps_neutron_diff_temp<neutron_gps_cut && ODEvent->at(i).od_cluster_charge.at(ncluster)>neutron_od_charge_cut)
			  //	    lsv_neutron_tag = true;	  
			  // int n=0;
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<end_time)
			{
			  nv_neutron_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_coincidence_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	    
			}		    
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<prompt_time)
			{
			  nv_neutron_prompt_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_prompt_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_prompt_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster)); 
			}
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<delay_time)
			{
			  nv_neutron_delay_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_delay_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_delay_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));  
			}
		      if(gps_neutron_diff_temp>after_time && gps_neutron_diff_temp<delay_time)
			{
			  nv_neutron_after_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_after_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_after_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));  
			}
		      if(gps_neutron_diff_temp>first_time && gps_neutron_diff_temp<delay_time)
			{ ++n;
			  if(n==1)
			    {
			      nv_neutron_first_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			      nv_neutron_first_gps_hist->Fill(gps_neutron_diff_temp);
			      nv_neutron_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));	     
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_neutron_first_alpha_gps_hist->Fill(gps_neutron_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_neutron_first_r_gps_hist->Fill(gps_neutron_diff_temp);
			    }
			}
		      if(gps_neutron_diff_temp>window1start && gps_neutron_diff_temp<window1end)
			{ ++n1;
			  if(n1==1)
			    {
			      nv_neutron_window1_first_gps_hist->Fill(gps_neutron_diff_temp);
			      nv_neutron_window1_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window1_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window1_first_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window1_first_ntuple->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_neutron_window1_first_alpha_gps_hist->Fill(gps_neutron_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_neutron_window1_first_r_gps_hist->Fill(gps_neutron_diff_temp);
			    }
			}
		      if(gps_neutron_diff_temp>window2start && gps_neutron_diff_temp<window2end)
			{ ++n2;
			  if(n2==1)
			    {
			      nv_neutron_window2_first_gps_hist->Fill(gps_neutron_diff_temp);
			      nv_neutron_window2_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window2_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window2_first_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_window2_first_ntuple->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos3 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos4)
				nv_neutron_window2_first_alpha_gps_hist->Fill(gps_neutron_diff_temp);
			      if(ODEvent->at(i).od_cluster_charge.at(ncluster)>pos1 && ODEvent->at(i).od_cluster_charge.at(ncluster)<pos2)
				nv_neutron_window2_first_r_gps_hist->Fill(gps_neutron_diff_temp);
			    }
			}
		
		      if(gps_neutron_diff_temp>late_time && gps_neutron_diff_temp<end_time)
			{ ++nlate;
			  if(nlate==1){
			  nv_neutron_late_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_late_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_late_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_height.at(ncluster),ODEvent->at(i).od_cluster_multiplicity.at(ncluster));   
			  }
			}
			}
		    }//end of passing multicut 
	      }//end of ODEvent->at(i).od_cluster_charge>0 cut	  
	  } //end of veto clusters 
	  //	}// end of ODEvent->size() loop
	  /*	  if(!lsv_gamma_tag && lsv_gamma_gps.size())	  
	    { int g=0; 
	      for(int ncluster=0; ncluster<ODEvent->at(i).od_nclusters; ncluster++)
		{ 	 
		  if(ODEvent->at(i).od_cluster_charge.at(ncluster)>0 && ODEvent->at(i).od_cluster_pass_multcut.at(ncluster)==1 && tpc_event_type==0)
		    {
		      //		      double gps_gamma_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;	 
		      double gps_gamma_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;
		      nv_gamma_full_coincidence_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3);	    
		      // if(gps_gamma_diff_temp>prompt_time && gps_gamma_diff_temp<delay_time)
		      if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<end_time)
			{
			  nv_gamma_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_coincidence_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_coincidence_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			}		    
		      if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<prompt_time)
			{
			  nv_gamma_prompt_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_prompt_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_prompt_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_prompt_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<delay_time)
			{
			  nv_gamma_delay_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_delay_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_delay_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_delay_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	  
			}
		      if(gps_gamma_diff_temp>after_time && gps_gamma_diff_temp<delay_time)
			{
			  nv_gamma_after_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_after_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_after_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_after_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>first_time && gps_gamma_diff_temp<delay_time)
			{ ++g;
			  if(g==1)
			    {
			      nv_gamma_first_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			      nv_gamma_first_gps_hist->Fill(gps_gamma_diff_temp);
			      nv_gamma_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_gamma_first_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));  
			    }
			}
		      if(gps_gamma_diff_temp>late_time && gps_gamma_diff_temp<end_time)
			{
			  nv_gamma_late_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_gamma_late_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_late_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_gps_ene_hist->Fill(gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_gamma_late_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	    
			}
		    }//end of multicuts
		} //end of loop
	    } //end of tpc gamma coincidence 
	  */
	  /*  
	  if(!lsv_neutron_tag && lsv_neutron_gps.size())	  
	    { int n=0;
	      for(int ncluster=0; ncluster<ODEvent->at(i).od_nclusters; ncluster++)
		{ 	 
		  if(ODEvent->at(i).od_cluster_charge.at(ncluster)>0 && ODEvent->at(i).od_cluster_pass_multcut.at(ncluster)==1 && tpc_event_type==1)
		    {
		      //		      double gps_neutron_diff_temp = (ODEvent->at(i).od_tpc_timestamp_diff + ODEvent->at(i).od_cluster_dtprompt.at(ncluster))*1.e+3;      
		      double gps_neutron_diff_temp = ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3;      
		      nv_neutron_full_coincidence_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster),ODEvent->at(i).od_cluster_dtprompt.at(ncluster)*1.e+3);	    
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<end_time)
			{
			  nv_neutron_coincidence_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_coincidence_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_coincidence_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_coincidence_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	    
			}		    
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<prompt_time)
			{
			  nv_neutron_prompt_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_prompt_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_prompt_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_prompt_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster)); 
			}
		      if(gps_neutron_diff_temp>middle_time && gps_neutron_diff_temp<delay_time)
			{
			  nv_neutron_delay_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_delay_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_delay_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_delay_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));  
			}
		      if(gps_neutron_diff_temp>after_time && gps_neutron_diff_temp<delay_time)
			{
			  nv_neutron_after_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_after_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_after_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_after_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));  
			}
		      if(gps_neutron_diff_temp>first_time && gps_neutron_diff_temp<delay_time)
			{ ++n;
			  if(n==1)
			    {
			      nv_neutron_first_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			      nv_neutron_first_gps_hist->Fill(gps_neutron_diff_temp);
			      nv_neutron_first_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			      nv_neutron_first_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));	     
			    }
			}
		      if(gps_neutron_diff_temp>late_time && gps_neutron_diff_temp<end_time)
			{
			  nv_neutron_late_ene_s1_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster),tpc_total_s1);
			  nv_neutron_late_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_late_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_small_ene_hist->Fill(ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_gps_ene_hist->Fill(gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));
			  nv_neutron_late_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,ODEvent->at(i).od_cluster_charge.at(ncluster));   
			}
		    } //end of multicuts
		}//end of loop
		}//end of tpc neutron coincidence */
	  //#ifndef closest_cluster  
	}// end of ODEvent->size() loop
      
      //#endif
      } // end of number_of_match_od_events
    } //end of tpc events 

  cout<<"Gamma ==> alphacounts="<<alpha_counts<<"\t neutroncounts="<<neutron_counts<<endl;
  cout<<"Neutron ==> nalphacounts="<<nalpha_counts<<"\t nneutroncounts="<<nneutron_counts<<endl;

  nv_gamma_coincidence_small_ene_hist->Sumw2();
  nv_gamma_prompt_small_ene_hist->Sumw2();
  nv_gamma_delay_small_ene_hist->Sumw2();
  nv_gamma_after_small_ene_hist->Sumw2();
  nv_gamma_first_small_ene_hist->Sumw2();
  nv_gamma_window1_first_small_ene_hist->Sumw2();
  nv_gamma_window2_first_small_ene_hist->Sumw2();
  nv_gamma_late_small_ene_hist->Sumw2();

  nv_gamma_delay_small_ene_hist->Scale(1./Entries);
  nv_gamma_after_small_ene_hist->Scale(1./Entries);
  nv_gamma_first_small_ene_hist->Scale(1./Entries);
  nv_gamma_prompt_small_ene_hist->Scale(1./Entries);
  nv_gamma_coincidence_small_ene_hist->Scale(1./Entries);
  nv_gamma_late_small_ene_hist->Scale(1./Entries);
  nv_gamma_window1_first_small_ene_hist->Scale(1./Entries);
  nv_gamma_window2_first_small_ene_hist->Scale(1./Entries);

  nv_neutron_coincidence_small_ene_hist->Sumw2();
  nv_neutron_prompt_small_ene_hist->Sumw2();
  nv_neutron_after_small_ene_hist->Sumw2();
  nv_neutron_delay_small_ene_hist->Sumw2();
  nv_neutron_first_small_ene_hist->Sumw2();
  nv_neutron_window1_first_small_ene_hist->Sumw2();
  nv_neutron_window2_first_small_ene_hist->Sumw2();
  nv_neutron_late_small_ene_hist->Sumw2();

  nv_neutron_delay_small_ene_hist->Scale(1./Entries);
  nv_neutron_after_small_ene_hist->Scale(1./Entries);
  nv_neutron_first_small_ene_hist->Scale(1./Entries);
  nv_neutron_prompt_small_ene_hist->Scale(1./Entries);
  nv_neutron_coincidence_small_ene_hist->Scale(1./Entries);
  nv_neutron_late_small_ene_hist->Scale(1./Entries);
  nv_neutron_window1_first_small_ene_hist->Scale(1./Entries);
  nv_neutron_window2_first_small_ene_hist->Scale(1./Entries);

  vector<int> linecolor = Colors();
  nv_gamma_delay_ene_hist->SetLineColor(linecolor.at(0));
  nv_gamma_late_ene_hist->SetLineColor(linecolor.at(1));
  nv_neutron_late_ene_hist->SetLineColor(linecolor.at(2));
  nv_gamma_late_small_ene_hist->SetLineColor(linecolor.at(3));
  nv_neutron_late_small_ene_hist->SetLineColor(linecolor.at(4));

  string plotdir="/darkside/users/hqian/AmBe10Hz_Calibration/SelfTriggerResults/SelfTriggerPlots/";
  string ext = "png";

  double height = 0.008;
  TBox *box1 = new TBox(pos3,0,pos4,height);
  box1->SetLineColor(2);
  box1->SetLineWidth(1);

  TBox *box2 = new TBox(pos1,0,pos2,height);
  box2->SetLineColor(3);
  box2->SetLineWidth(1);

  

  TH1F* nv_gamma_delay_small_ene_subtracted_hist = new TH1F("nv_gamma_delay_small_ene_subtracted_hist","Veto Gamma Subtracted Delay Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_delay_small_ene_subtracted_hist->Add(nv_gamma_delay_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c11 = new TCanvas("c11","Veto Gamma Delay Small Energy Subtracting BG",1000,400);
  c11->Divide(2,1);
  c11->cd(1);
  gPad->SetLogy();
  nv_gamma_delay_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  c11->cd(2);
  gPad->SetLogy();
  nv_gamma_delay_small_ene_subtracted_hist->Draw();
  //  c11->SaveAs(Form("%snv_gamma_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));  

  TH1F* nv_gamma_coincidence_small_ene_subtracted_hist = new TH1F("nv_gamma_coincidence_small_ene_subtracted_hist","Veto Gamma Subtracted After Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_coincidence_small_ene_subtracted_hist->Add(nv_gamma_coincidence_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c12 = new TCanvas("c12","Veto Gamma Coincidence Small Energy Subtracting BG",1000,400);
  c12->Divide(2,1);
  c12->cd(1);
  gPad->SetLogy();
  nv_gamma_coincidence_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  c12->cd(2);
  gPad->SetLogy();
  nv_gamma_coincidence_small_ene_subtracted_hist->Draw();
  //c12->SaveAs(Form("%snv_gamma_coincidence_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_gamma_after_small_ene_subtracted_hist = new TH1F("nv_gamma_after_small_ene_subtracted_hist","Veto Gamma Subtracted After Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_after_small_ene_subtracted_hist->Add(nv_gamma_after_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c13 = new TCanvas("c13","Veto Gamma AFter Small Energy Subtracting BG",1000,400);
  c13->Divide(2,1);
  c13->cd(1);
  //  gPad->SetLogy();
  nv_gamma_after_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  c13->cd(2);
  // gPad->SetLogy();
  nv_gamma_after_small_ene_subtracted_hist->Draw();
  //c13->SaveAs(Form("%snv_gamma_after_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_gamma_first_small_ene_subtracted_hist = new TH1F("nv_gamma_first_small_ene_subtracted_hist","Veto Gamma Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_first_small_ene_subtracted_hist->Add(nv_gamma_first_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c14 = new TCanvas("c14","Veto Gamma First Small Energy Subtracting BG",1000,400);
  c14->Divide(2,1);
  c14->cd(1);
  //  gPad->SetLogy();
  nv_gamma_first_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  box1->Draw();
  box2->Draw();
  c14->cd(2);
  // gPad->SetLogy();
  nv_gamma_first_small_ene_subtracted_hist->Draw();
  //c14->SaveAs(Form("%snv_gamma_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  box1->Draw();
  box2->Draw();  
  double br3 = nv_gamma_first_small_ene_subtracted_hist->Integral(nv_gamma_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_first_small_ene_subtracted_hist->FindBin(pos4));
  double br4 = nv_gamma_first_small_ene_subtracted_hist->Integral(nv_gamma_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_first_small_ene_subtracted_hist->FindBin(pos2));
  cout<<"first "<<1.*br3/br4<<endl;


  TH1F* nv_gamma_prompt_small_ene_subtracted_hist = new TH1F("nv_gamma_prompt_small_ene_subtracted_hist","Veto Gamma Subtracted Prompt Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_prompt_small_ene_subtracted_hist->Add(nv_gamma_prompt_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c15 = new TCanvas("c15","Veto Gamma Prompt Small Energy Subtracting BG",1000,400);
  c15->Divide(2,1);
  c15->cd(1);
  gPad->SetLogy();
  nv_gamma_prompt_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  c15->cd(2);
  gPad->SetLogy();
  nv_gamma_prompt_small_ene_subtracted_hist->Draw();
  //c15->SaveAs(Form("%snv_gamma_prompt_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_gamma_window1_first_small_ene_subtracted_hist = new TH1F("nv_gamma_window1_first_small_ene_subtracted_hist","Veto Gamma window1 Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_window1_first_small_ene_subtracted_hist->Add(nv_gamma_window1_first_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c51 = new TCanvas("c51","Veto Gamma window1 First Small Energy Subtracting BG",1000,400);
  c51->Divide(2,1);
  c51->cd(1);
  //  gPad->SetLogy();
  nv_gamma_window1_first_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  box1->Draw();
  box2->Draw();
  c51->cd(2);
  // gPad->SetLogy();
  nv_gamma_window1_first_small_ene_subtracted_hist->SetLineColor(linecolor.at(8));;
  nv_gamma_window1_first_small_ene_subtracted_hist->Draw();
  //c14->SaveAs(Form("%snv_gamma_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  box1->Draw();
  box2->Draw();
  double br51 = nv_gamma_window1_first_small_ene_subtracted_hist->Integral(nv_gamma_window1_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_window1_first_small_ene_subtracted_hist->FindBin(pos4));
  double br52 = nv_gamma_window1_first_small_ene_subtracted_hist->Integral(nv_gamma_window1_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_window1_first_small_ene_subtracted_hist->FindBin(pos2));
  cout<<"window1 first "<<1.*br51/br52<<endl;

  TH1F* nv_gamma_window2_first_small_ene_subtracted_hist = new TH1F("nv_gamma_window2_first_small_ene_subtracted_hist","Veto Gamma window2 Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_window2_first_small_ene_subtracted_hist->Add(nv_gamma_window2_first_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c52 = new TCanvas("c52","Veto Gamma window2 First Small Energy Subtracting BG",1000,400);
  c52->Divide(2,1);
  c52->cd(1);
  //  gPad->SetLogy();
  nv_gamma_window2_first_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  box1->Draw();
  box2->Draw();
  c52->cd(2);
  // gPad->SetLogy();
  nv_gamma_window2_first_small_ene_subtracted_hist->SetLineColor(linecolor.at(7));;
  nv_gamma_window2_first_small_ene_subtracted_hist->Draw();
  //c14->SaveAs(Form("%snv_gamma_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  box1->Draw();
  box2->Draw();
  double br53 = nv_gamma_window2_first_small_ene_subtracted_hist->Integral(nv_gamma_window2_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_window2_first_small_ene_subtracted_hist->FindBin(pos4));
  double br54 = nv_gamma_window2_first_small_ene_subtracted_hist->Integral(nv_gamma_window2_first_small_ene_subtracted_hist->FindBin(pos3),nv_gamma_window2_first_small_ene_subtracted_hist->FindBin(pos2));
  cout<<"window2 first "<<1.*br53/br54<<endl;

  TLegend *leg53 = new TLegend(0.47,0.7,0.87,0.9);
  //  string entry53[3] = {"First cluster in [20us,60us]","First cluster in [30us,70us]","First cluster in [40us,80us]"};
  string entry53[3] = {"First cluster in [20us,50us]","First cluster in [30us,60us]","First cluster in [40us,70us]"};
  leg53->AddEntry(nv_gamma_first_small_ene_subtracted_hist,entry53[0].c_str(),"l");
  leg53->AddEntry(nv_gamma_window1_first_small_ene_subtracted_hist,entry53[1].c_str(),"l");
  leg53->AddEntry(nv_gamma_window2_first_small_ene_subtracted_hist,entry53[2].c_str(),"l");
  TCanvas *c53 = new TCanvas("c53","Veto Gamma First Small Energy Sub sorts",600,400);
  nv_gamma_first_small_ene_subtracted_hist->Draw();
  nv_gamma_window1_first_small_ene_subtracted_hist->Draw("same");
  nv_gamma_window2_first_small_ene_subtracted_hist->Draw("same");
  leg53->Draw();

  TCanvas *c54 = new TCanvas("c54","Veto First Alpha Time sorts",600,400);
  nv_gamma_window1_first_alpha_gps_hist->SetLineColor(linecolor.at(8));
  nv_gamma_window2_first_alpha_gps_hist->SetLineColor(linecolor.at(7));
  nv_gamma_first_alpha_gps_hist->Draw();
  nv_gamma_window1_first_alpha_gps_hist->Draw("same");
  nv_gamma_window2_first_alpha_gps_hist->Draw("same");
  leg53->Draw();

  TCanvas *c55 = new TCanvas("c55","Veto First Alpha+Gamma Time sorts",600,400);
  nv_gamma_window1_first_r_gps_hist->SetLineColor(linecolor.at(8));
  nv_gamma_window2_first_r_gps_hist->SetLineColor(linecolor.at(7));
  nv_gamma_first_r_gps_hist->Draw();
  nv_gamma_window1_first_r_gps_hist->Draw("same");
  nv_gamma_window2_first_r_gps_hist->Draw("same");
  leg53->Draw();
  

  TH1F* nv_neutron_delay_small_ene_subtracted_hist = new TH1F("nv_neutron_delay_small_ene_subtracted_hist","Veto Neutron Subtracted Delay Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_delay_small_ene_subtracted_hist->Add(nv_neutron_delay_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c31 = new TCanvas("c31","Veto Neutron Delay Small Energy Subtracting BG",1000,400);
  c31->Divide(2,1);
  c31->cd(1);
  gPad->SetLogy();
  nv_neutron_delay_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c31->cd(2);
  gPad->SetLogy();
  nv_neutron_delay_small_ene_subtracted_hist->Draw();
  //  c31->SaveAs(Form("%snv_neutron_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));  

  TH1F* nv_neutron_coincidence_small_ene_subtracted_hist = new TH1F("nv_neutron_coincidence_small_ene_subtracted_hist","Veto Neutron Subtracted After Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_coincidence_small_ene_subtracted_hist->Add(nv_neutron_coincidence_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c32 = new TCanvas("c32","Veto Neutron Coincidence Small Energy Subtracting BG",1000,400);
  c32->Divide(2,1);
  c32->cd(1);
  gPad->SetLogy();
  nv_neutron_coincidence_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c32->cd(2);
  gPad->SetLogy();
  nv_neutron_coincidence_small_ene_subtracted_hist->Draw();
  //c32->SaveAs(Form("%snv_neutron_coincidence_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_after_small_ene_subtracted_hist = new TH1F("nv_neutron_after_small_ene_subtracted_hist","Veto Neutron Subtracted After Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_after_small_ene_subtracted_hist->Add(nv_neutron_after_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c33 = new TCanvas("c33","Veto Neutron AFter Small Energy Subtracting BG",1000,400);
  c33->Divide(2,1);
  c33->cd(1);
  //  gPad->SetLogy();
  nv_neutron_after_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c33->cd(2);
  //  gPad->SetLogy();
  nv_neutron_after_small_ene_subtracted_hist->Draw();
  //c33->SaveAs(Form("%snv_neutron_after_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_first_small_ene_subtracted_hist = new TH1F("nv_neutron_first_small_ene_subtracted_hist","Veto Neutron Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_first_small_ene_subtracted_hist->Add(nv_neutron_first_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c34 = new TCanvas("c34","Veto Neutron First Small Energy Subtracting BG",1000,400);
  c34->Divide(2,1);
  c34->cd(1);
  // gPad->SetLogy();
  nv_neutron_first_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c34->cd(2);
  // gPad->SetLogy();
  nv_neutron_first_small_ene_subtracted_hist->Draw();
  //c34->SaveAs(Form("%snv_neutron_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_prompt_small_ene_subtracted_hist = new TH1F("nv_neutron_prompt_small_ene_subtracted_hist","Veto Neutron Subtracted Prompt Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_prompt_small_ene_subtracted_hist->Add(nv_neutron_prompt_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c35 = new TCanvas("c35","Veto Neutron Prompt Small Energy Subtracting BG",1000,400);
  c35->Divide(2,1);
  c35->cd(1);
  gPad->SetLogy();
  nv_neutron_prompt_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c35->cd(2);
  gPad->SetLogy();
  nv_neutron_prompt_small_ene_subtracted_hist->Draw();
  //c35->SaveAs(Form("%snv_neutron_prompt_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c10 = new TCanvas("c10","Veto height/multiplicity Vs Charge",600,400);
  //  nv_charge_height_multiplicity_hist->SetLineColor(linecolor.at(1));
  nv_charge_height_multiplicity_hist->SetMarkerColor(linecolor.at(6));
  nv_all_charge_height_multiplicity_hist->Draw("colz");
  nv_charge_height_multiplicity_hist->Draw("same");

  TLegend *leg = new TLegend(0.47,0.7,0.87,0.9);
  string entryname[3] = {"all clusters","passing multicut","failing multicut"};
  
  TCanvas *c2 = new TCanvas("c2","Low Energy Spectrum",600,400);
  gPad->SetLogy();
  //  gStyle->SetOptStat(0);
  nv_all_small_ene_hist->SetLineColor(linecolor.at(0));
  nv_small_ene_hist->SetLineColor(linecolor.at(1));
  nv_fail_small_ene_hist->SetLineColor(linecolor.at(2));
  leg->AddEntry(nv_all_small_ene_hist,entryname[0].c_str(),"l");
  leg->AddEntry(nv_small_ene_hist,entryname[1].c_str(),"l");
  leg->AddEntry(nv_fail_small_ene_hist,entryname[2].c_str(),"l");
  nv_all_small_ene_hist->Draw();
  nv_small_ene_hist->Draw("same");
  nv_fail_small_ene_hist->Draw("same");
  leg->Draw();
  //c2->SaveAs(Form("%smulticut%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c21 = new TCanvas("c21","Veto Gamma Coincidence",1000,600);
  c21->Divide(2,2);
  c21->cd(1);
  gPad->SetLogy();
  nv_gamma_coincidence_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_coincidence_gps_hist->Draw();
  c21->cd(2);
  gPad->SetLogy();
  nv_gamma_coincidence_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_coincidence_ene_hist->Draw();
  c21->cd(3);
  gPad->SetLogy();
  //  nv_gamma_coincidence_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_coincidence_gps_ene_hist->Draw("colz");
  c21->cd(4);
  gPad->SetLogy();
  //  nv_gamma_coincidence_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_coincidence_ene_s1_hist->Draw("colz");
  //c21->SaveAs(Form("%snv_gamma_coincidence%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c22 = new TCanvas("c22","Veto Gamma Prompt",1000,600);
  c22->Divide(2,2);
  c22->cd(1);
  gPad->SetLogy();
  nv_gamma_prompt_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_prompt_gps_hist->Draw();
  c22->cd(2);
  gPad->SetLogy();
  nv_gamma_prompt_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_prompt_ene_hist->Draw();
  c22->cd(3);
  gPad->SetLogy();
  //  nv_gamma_prompt_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_prompt_gps_ene_hist->Draw("colz");
  c22->cd(4);
  gPad->SetLogy();
  //  nv_gamma_prompt_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_prompt_ene_s1_hist->Draw("colz");
  //c22->SaveAs(Form("%snv_gamma_prompt%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c23 = new TCanvas("c23","Veto Gamma Delay",1000,600);
  c23->Divide(2,2);
  c23->cd(1);
  gPad->SetLogy();
  nv_gamma_delay_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_delay_gps_hist->Draw();
  c23->cd(2);
  gPad->SetLogy();
  nv_gamma_delay_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_delay_ene_hist->Draw();
  c23->cd(3);
  gPad->SetLogy();
  //  nv_gamma_delay_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_delay_gps_ene_hist->Draw("colz");
  c23->cd(4);
  gPad->SetLogy();
  //  nv_gamma_delay_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_delay_ene_s1_hist->Draw("colz");
  //  c23->SaveAs(Form("%snv_gamma_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c24 = new TCanvas("c24","Veto Gamma After",1000,600);
  c24->Divide(2,2);
  c24->cd(1);
  gPad->SetLogy();
  nv_gamma_after_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_after_gps_hist->Draw();
  c24->cd(2);
  gPad->SetLogy();
  nv_gamma_after_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_after_ene_hist->Draw();
  c24->cd(3);
  gPad->SetLogy();
  //  nv_gamma_after_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_after_gps_ene_hist->Draw("colz");
  c24->cd(4);
  gPad->SetLogy();
  //  nv_gamma_after_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_after_ene_s1_hist->Draw("colz");
  //  c24->SaveAs(Form("%snv_gamma_after%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c25 = new TCanvas("c25","Veto Gamma Late",1000,600);
  c25->Divide(2,2);
  c25->cd(1);
  gPad->SetLogy();
  //  nv_gamma_late_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_late_gps_hist->Draw();
  c25->cd(2);
  gPad->SetLogy();
  // nv_gamma_late_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_late_ene_hist->Draw();
  c25->cd(3);
  gPad->SetLogy();
  //  nv_gamma_late_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_late_gps_ene_hist->Draw("colz");
  c25->cd(4);
  gPad->SetLogy();
  //  nv_gamma_late_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_late_ene_s1_hist->Draw("colz");
  //  c25->SaveAs(Form("%snv_gamma_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c26 = new TCanvas("c26","Veto Gamma First",1000,600);
  c26->Divide(2,2);
  c26->cd(1);
  gPad->SetLogy();
  nv_gamma_first_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_first_gps_hist->Draw();
  c26->cd(2);
  gPad->SetLogy();
  nv_gamma_first_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_first_ene_hist->Draw();
  c26->cd(3);
  gPad->SetLogy();
  //  nv_gamma_first_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_first_gps_ene_hist->Draw("colz");
  c26->cd(4);
  gPad->SetLogy();
  //  nv_gamma_first_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_first_ene_s1_hist->Draw("colz");
  //  c26->SaveAs(Form("%snv_gamma_first%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_window1_first_small_ene_subtracted_hist = new TH1F("nv_neutron_window1_first_small_ene_subtracted_hist","Veto Neutron window1 Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_window1_first_small_ene_subtracted_hist->Add(nv_neutron_window1_first_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c61 = new TCanvas("c61","Veto Neutron window1 First Small Energy Subtracting BG",1000,400);
  c61->Divide(2,1);
  c61->cd(1);
  //  gPad->SetLogy();
  nv_neutron_window1_first_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  box1->Draw();
  box2->Draw();
  c61->cd(2);
  // gPad->SetLogy();
  nv_neutron_window1_first_small_ene_subtracted_hist->SetLineColor(linecolor.at(8));;
  nv_neutron_window1_first_small_ene_subtracted_hist->Draw();
  //c14->SaveAs(Form("%snv_neutron_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  box1->Draw();
  box2->Draw();
  double br61 = nv_neutron_window1_first_small_ene_subtracted_hist->Integral(nv_neutron_window1_first_small_ene_subtracted_hist->FindBin(pos3),nv_neutron_window1_first_small_ene_subtracted_hist->FindBin(pos4));
  double br62 = nv_neutron_window1_first_small_ene_subtracted_hist->Integral(nv_neutron_window1_first_small_ene_subtracted_hist->FindBin(pos3),nv_neutron_window1_first_small_ene_subtracted_hist->FindBin(pos2));
  cout<<"Neutron window1 first "<<1.*br61/br62<<endl;

  TH1F* nv_neutron_window2_first_small_ene_subtracted_hist = new TH1F("nv_neutron_window2_first_small_ene_subtracted_hist","Veto Neutron window2 Subtracted First Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_window2_first_small_ene_subtracted_hist->Add(nv_neutron_window2_first_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c62 = new TCanvas("c62","Veto Neutron window2 First Small Energy Subtracting BG",1000,400);
  c62->Divide(2,1);
  c62->cd(1);
  //  gPad->SetLogy();
  nv_neutron_window2_first_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  box1->Draw();
  box2->Draw();
  c62->cd(2);
  // gPad->SetLogy();
  nv_neutron_window2_first_small_ene_subtracted_hist->SetLineColor(linecolor.at(7));;
  nv_neutron_window2_first_small_ene_subtracted_hist->Draw();
  //c14->SaveAs(Form("%snv_neutron_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  box1->Draw();
  box2->Draw();
  double br63 = nv_neutron_window2_first_small_ene_subtracted_hist->Integral(nv_neutron_window2_first_small_ene_subtracted_hist->FindBin(pos3),nv_neutron_window2_first_small_ene_subtracted_hist->FindBin(pos4));
  double br64 = nv_neutron_window2_first_small_ene_subtracted_hist->Integral(nv_neutron_window2_first_small_ene_subtracted_hist->FindBin(pos3),nv_neutron_window2_first_small_ene_subtracted_hist->FindBin(pos2));
  cout<<"Neutron window2 first "<<1.*br63/br64<<endl;

  TLegend *leg63 = new TLegend(0.47,0.7,0.87,0.9);
  //  string entry63[3] = {"First cluster in [20us,60us]","First cluster in [30us,70us]","First cluster in [40us,80us]"};
  string entry63[3] = {"First cluster in [20us,50us]","First cluster in [30us,60us]","First cluster in [40us,70us]"};
  leg63->AddEntry(nv_neutron_first_small_ene_subtracted_hist,entry63[0].c_str(),"l");
  leg63->AddEntry(nv_neutron_window1_first_small_ene_subtracted_hist,entry63[1].c_str(),"l");
  leg63->AddEntry(nv_neutron_window2_first_small_ene_subtracted_hist,entry63[2].c_str(),"l");
  TCanvas *c63 = new TCanvas("c63","Veto Neutron First Small Energy Sub sorts",600,400);
  nv_neutron_first_small_ene_subtracted_hist->Draw();
  nv_neutron_window1_first_small_ene_subtracted_hist->Draw("same");
  nv_neutron_window2_first_small_ene_subtracted_hist->Draw("same");
  leg63->Draw();

  TCanvas *c64 = new TCanvas("c64","Veto First Alpha Time sorts",600,400);
  nv_neutron_window1_first_alpha_gps_hist->SetLineColor(linecolor.at(8));
  nv_neutron_window2_first_alpha_gps_hist->SetLineColor(linecolor.at(7));
  nv_neutron_first_alpha_gps_hist->Draw();
  nv_neutron_window1_first_alpha_gps_hist->Draw("same");
  nv_neutron_window2_first_alpha_gps_hist->Draw("same");
  leg63->Draw();

  TCanvas *c65 = new TCanvas("c65","Veto First Alpha+Neutron Time sorts",600,400);
  nv_neutron_window1_first_r_gps_hist->SetLineColor(linecolor.at(8));
  nv_neutron_window2_first_r_gps_hist->SetLineColor(linecolor.at(7));
  nv_neutron_first_r_gps_hist->Draw();
  nv_neutron_window1_first_r_gps_hist->Draw("same");
  nv_neutron_window2_first_r_gps_hist->Draw("same");
  leg63->Draw();
  

  TCanvas *c41 = new TCanvas("c41","Veto Neutron Coincidence",1000,600);
  c41->Divide(2,2);
  c41->cd(1);
  gPad->SetLogy();
  nv_neutron_coincidence_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_coincidence_gps_hist->Draw();
  c41->cd(2);
  gPad->SetLogy();
  nv_neutron_coincidence_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_coincidence_ene_hist->Draw();
  c41->cd(3);
  gPad->SetLogy();
  //  nv_neutron_coincidence_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_coincidence_gps_ene_hist->Draw("colz");
  c41->cd(4);
  gPad->SetLogy();
  //  nv_neutron_coincidence_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_coincidence_ene_s1_hist->Draw("colz");
  //  c41->SaveAs(Form("%snv_neutron_coincidence%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c42 = new TCanvas("c42","Veto Neutron Prompt",1000,600);
  c42->Divide(2,2);
  c42->cd(1);
  gPad->SetLogy();
  nv_neutron_prompt_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_prompt_gps_hist->Draw();
  c42->cd(2);
  gPad->SetLogy();
  nv_neutron_prompt_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_prompt_ene_hist->Draw();
  c42->cd(3);
  gPad->SetLogy();
  //  nv_neutron_prompt_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_prompt_gps_ene_hist->Draw("colz");
  c42->cd(4);
  gPad->SetLogy();
  //  nv_neutron_prompt_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_prompt_ene_s1_hist->Draw("colz");
  //  c42->SaveAs(Form("%snv_neutron_prompt%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c43 = new TCanvas("c43","Veto Neutron Delay",1000,600);
  c43->Divide(2,2);
  c43->cd(1);
  gPad->SetLogy();
  nv_neutron_delay_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_delay_gps_hist->Draw();
  c43->cd(2);
  gPad->SetLogy();
  nv_neutron_delay_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_delay_ene_hist->Draw();
  c43->cd(3);
  gPad->SetLogy();
  //  nv_neutron_delay_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_delay_gps_ene_hist->Draw("colz");
  c43->cd(4);
  gPad->SetLogy();
  //  nv_neutron_delay_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_delay_ene_s1_hist->Draw("colz");
  //  c43->SaveAs(Form("%snv_neutron_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c44 = new TCanvas("c44","Veto Neutron After",1000,600);
  c44->Divide(2,2);
  c44->cd(1);
  gPad->SetLogy();
  nv_neutron_after_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_after_gps_hist->Draw();
  c44->cd(2);
  gPad->SetLogy();
  nv_neutron_after_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_after_ene_hist->Draw();
  c44->cd(3);
  gPad->SetLogy();
  //  nv_neutron_after_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_after_gps_ene_hist->Draw("colz");
  c44->cd(4);
  gPad->SetLogy();
  //  nv_neutron_after_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_after_ene_s1_hist->Draw("colz");
  //  c44->SaveAs(Form("%snv_neutron_after%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c45 = new TCanvas("c45","Veto Neutron Late",1000,600);
  c45->Divide(2,2);
  c45->cd(1);
  gPad->SetLogy();
  //  nv_neutron_late_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_late_gps_hist->Draw();
  c45->cd(2);
  gPad->SetLogy();
  // nv_neutron_late_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_late_ene_hist->Draw();
  c45->cd(3);
  gPad->SetLogy();
  //  nv_neutron_late_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_late_gps_ene_hist->Draw("colz");
  c45->cd(4);
  gPad->SetLogy();
  //  nv_neutron_late_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_late_ene_s1_hist->Draw("colz");
  //  c45->SaveAs(Form("%snv_neutron_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c46 = new TCanvas("c46","Veto Neutron First",1000,600);
  c46->Divide(2,2);
  c46->cd(1);
  gPad->SetLogy();
  nv_neutron_first_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_first_gps_hist->Draw();
  c46->cd(2);
  gPad->SetLogy();
  nv_neutron_first_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_first_ene_hist->Draw();
  c46->cd(3);
  gPad->SetLogy();
  //  nv_neutron_first_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_first_gps_ene_hist->Draw("colz");
  c46->cd(4);
  gPad->SetLogy();
  //  nv_neutron_first_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_first_ene_s1_hist->Draw("colz");
  // c46->SaveAs(Form("%snv_neutron_first%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));


#ifdef Write_Plots
  //  c1->SaveAs(Form("%snv_gamma_delay_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));  
  c2->SaveAs(Form("%smulticut%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  /*  c3->SaveAs(Form("%snv_gamma_after_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c4->SaveAs(Form("%snv_gamma_alpha_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c5->SaveAs(Form("%snv_neutron_alpha_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c6->SaveAs(Form("%snv_gamma_alpha_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c7->SaveAs(Form("%snv_neutron_alpha_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c8->SaveAs(Form("%snv_gamma_alpha_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c9->SaveAs(Form("%snv_neutron_alpha_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  */
  c10->SaveAs(Form("%snv_charge_height_multiplicity%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  c11->SaveAs(Form("%snv_gamma_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));  
  c12->SaveAs(Form("%snv_gamma_coincidence_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c13->SaveAs(Form("%snv_gamma_after_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c14->SaveAs(Form("%snv_gamma_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c15->SaveAs(Form("%snv_gamma_prompt_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  c21->SaveAs(Form("%snv_gamma_coincidence%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c22->SaveAs(Form("%snv_gamma_prompt%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c23->SaveAs(Form("%snv_gamma_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c24->SaveAs(Form("%snv_gamma_after%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c25->SaveAs(Form("%snv_gamma_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c26->SaveAs(Form("%snv_gamma_first%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c27->SaveAs(Form("%snv_gamma_alpha%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c28->SaveAs(Form("%snv_gamma_alpha_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c29->SaveAs(Form("%snv_gamma_alpha_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  c31->SaveAs(Form("%snv_neutron_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));  
  c32->SaveAs(Form("%snv_neutron_coincidence_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c33->SaveAs(Form("%snv_neutron_after_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c34->SaveAs(Form("%snv_neutron_first_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c35->SaveAs(Form("%snv_neutron_prompt_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  c41->SaveAs(Form("%snv_neutron_coincidence%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c42->SaveAs(Form("%snv_neutron_prompt%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c43->SaveAs(Form("%snv_neutron_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c44->SaveAs(Form("%snv_neutron_after%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c45->SaveAs(Form("%snv_neutron_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  c46->SaveAs(Form("%snv_neutron_first%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c47->SaveAs(Form("%snv_neutron_alpha%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c48->SaveAs(Form("%snv_neutron_alpha_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  //  c49->SaveAs(Form("%snv_neutron_alpha_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
#endif
  //  c10->SaveAs(Form("%snv_charge_height_multiplicity%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  //===============Save The Plots=============================================  
  string outdirname="/darkside/users/hqian/AmBe10Hz_Calibration/SelfTriggerResults/";
  string outputname=outdirname+"AmBe10Hz_"+series.Data()+Time+".root";
  TFile f2D(outputname.c_str(), "RECREATE"); 
  tpc_total_s1_hist->Write();
  tpc_s1_late_hist->Write();
  tpc_s1_starttime_hist->Write();
  tpc_total_f90_hist->Write();
  tpc_total_s1_f90_hist->Write();
  tpc_gamma_total_s1_hist->Write();
  tpc_gamma_s1_late_hist->Write();
  tpc_neutron_total_s1_hist->Write();
  tpc_neutron_s1_late_hist->Write();
  /*  tpc_gamma_gps_hist->Write();
  tpc_gamma_ene_hist->Write();
  tpc_gamma_gps_ene_hist->Write();
  tpc_gamma_ntuple->Write();
  */
  //********Save All ODEVENT->AT(I).OD clusters************************
  nv_all_gps_hist->Write();
  nv_all_ene_hist->Write();
  nv_all_small_ene_hist->Write();
  nv_all_gps_ene_hist->Write();
  nv_all_ene_s1_hist->Write();
  nv_all_ntuple->Write();  
  nv_all_gamma_coincidence_gps_hist->Write();
  nv_all_gamma_coincidence_ene_hist->Write();
  nv_all_gamma_coincidence_small_ene_hist->Write();
  nv_all_gamma_coincidence_gps_ene_hist->Write();
  nv_all_gamma_coincidence_ene_s1_hist->Write();
  nv_all_gamma_coincidence_ntuple->Write();  
  nv_all_neutron_coincidence_gps_hist->Write();
  nv_all_neutron_coincidence_ene_hist->Write();
  nv_all_neutron_coincidence_small_ene_hist->Write();
  nv_all_neutron_coincidence_gps_ene_hist->Write();
  nv_all_neutron_coincidence_ene_s1_hist->Write();
  nv_all_neutron_coincidence_ntuple->Write();  

  //*********Save Passing MultiCut cluster**************
  nv_gps_hist->Write();
  nv_ene_hist->Write();
  nv_small_ene_hist->Write();
  nv_gps_ene_hist->Write();
  nv_ene_s1_hist->Write();
  nv_ntuple->Write();  
  nv_late_gps_hist->Write();
  nv_late_ene_hist->Write();
  nv_late_small_ene_hist->Write();
  nv_late_gps_ene_hist->Write();
  nv_late_ene_s1_hist->Write();
  nv_late_ntuple->Write();  

  nv_gamma_full_ene_hist->Write();
  nv_gamma_full_small_ene_hist->Write();
  nv_gamma_full_ntuple->Write();
  nv_gamma_full_coincidence_ntuple->Write();
  nv_gamma_ene_s1_hist->Write();
  nv_gamma_coincidence_ene_s1_hist->Write();
  nv_gamma_coincidence_gps_hist->Write();
  nv_gamma_coincidence_ene_hist->Write();
  nv_gamma_coincidence_small_ene_hist->Write();
  nv_gamma_coincidence_gps_ene_hist->Write();
  nv_gamma_coincidence_ntuple->Write();
  nv_gamma_prompt_ene_s1_hist->Write();
  nv_gamma_prompt_gps_hist->Write();
  nv_gamma_prompt_ene_hist->Write();
  nv_gamma_prompt_small_ene_hist->Write();
  nv_gamma_prompt_gps_ene_hist->Write();
  nv_gamma_prompt_ntuple->Write();
  nv_gamma_delay_ene_s1_hist->Write();
  nv_gamma_delay_gps_hist->Write();
  nv_gamma_delay_ene_hist->Write();
  nv_gamma_delay_small_ene_hist->Write();
  nv_gamma_delay_gps_ene_hist->Write();
  nv_gamma_delay_ntuple->Write();
  nv_gamma_after_ene_s1_hist->Write();
  nv_gamma_after_gps_hist->Write();
  nv_gamma_after_ene_hist->Write();
  nv_gamma_after_small_ene_hist->Write();
  nv_gamma_after_gps_ene_hist->Write();
  nv_gamma_after_ntuple->Write();
  nv_gamma_first_ene_s1_hist->Write();
  nv_gamma_first_gps_hist->Write();
  nv_gamma_first_ene_hist->Write();
  nv_gamma_first_small_ene_hist->Write();
  nv_gamma_first_gps_ene_hist->Write();
  nv_gamma_first_alpha_gps_hist->Write();
  nv_gamma_first_r_gps_hist->Write();
  nv_gamma_first_ntuple->Write();
  nv_gamma_window1_first_gps_hist->Write();
  nv_gamma_window1_first_ene_hist->Write();
  nv_gamma_window1_first_small_ene_hist->Write();
  nv_gamma_window1_first_gps_ene_hist->Write();
  nv_gamma_window1_first_alpha_gps_hist->Write();
  nv_gamma_window1_first_r_gps_hist->Write();
  nv_gamma_window1_first_ntuple->Write();

  nv_gamma_window2_first_gps_hist->Write();
  nv_gamma_window2_first_ene_hist->Write();
  nv_gamma_window2_first_small_ene_hist->Write();
  nv_gamma_window2_first_alpha_gps_hist->Write();
  nv_gamma_window2_first_r_gps_hist->Write();
  nv_gamma_window2_first_gps_ene_hist->Write();
  nv_gamma_window2_first_ntuple->Write();

  nv_gamma_late_ene_s1_hist->Write();
  nv_gamma_late_gps_hist->Write();
  nv_gamma_late_ene_hist->Write();
  nv_gamma_late_small_ene_hist->Write();
  nv_gamma_late_gps_ene_hist->Write();
  nv_gamma_late_ntuple->Write();

  nv_neutron_ene_s1_hist->Write();
  nv_neutron_full_ene_hist->Write();
  nv_neutron_full_small_ene_hist->Write();
  nv_neutron_full_ntuple->Write();
  nv_neutron_full_coincidence_ntuple->Write();
  nv_neutron_coincidence_ene_s1_hist->Write();
  nv_neutron_coincidence_gps_hist->Write();
  nv_neutron_coincidence_ene_hist->Write();
  nv_neutron_coincidence_small_ene_hist->Write();
  nv_neutron_coincidence_gps_ene_hist->Write();
  nv_neutron_coincidence_ntuple->Write();
  nv_neutron_prompt_ene_s1_hist->Write();
  nv_neutron_prompt_gps_hist->Write();
  nv_neutron_prompt_ene_hist->Write();
  nv_neutron_prompt_small_ene_hist->Write();
  nv_neutron_prompt_gps_ene_hist->Write();
  nv_neutron_prompt_ntuple->Write();
  nv_neutron_delay_ene_s1_hist->Write();
  nv_neutron_delay_gps_hist->Write();
  nv_neutron_delay_ene_hist->Write();
  nv_neutron_delay_small_ene_hist->Write();
  nv_neutron_delay_gps_ene_hist->Write();
  nv_neutron_delay_ntuple->Write();
  nv_neutron_after_ene_s1_hist->Write();
  nv_neutron_after_gps_hist->Write();
  nv_neutron_after_ene_hist->Write();
  nv_neutron_after_small_ene_hist->Write();
  nv_neutron_after_gps_ene_hist->Write();
  nv_neutron_after_ntuple->Write();
  nv_neutron_first_ene_s1_hist->Write();
  nv_neutron_first_gps_hist->Write();
  nv_neutron_first_ene_hist->Write();
  nv_neutron_first_small_ene_hist->Write();
  nv_neutron_first_gps_ene_hist->Write();
  nv_neutron_first_ntuple->Write();
  nv_neutron_first_alpha_gps_hist->Write();
  nv_neutron_first_r_gps_hist->Write();

  nv_neutron_window1_first_gps_hist->Write();
  nv_neutron_window1_first_ene_hist->Write();
  nv_neutron_window1_first_small_ene_hist->Write();
  nv_neutron_window1_first_gps_ene_hist->Write();
  nv_neutron_window1_first_alpha_gps_hist->Write();
  nv_neutron_window1_first_r_gps_hist->Write();
  nv_neutron_window1_first_ntuple->Write();

  nv_neutron_window2_first_gps_hist->Write();
  nv_neutron_window2_first_ene_hist->Write();
  nv_neutron_window2_first_small_ene_hist->Write();
  nv_neutron_window2_first_alpha_gps_hist->Write();
  nv_neutron_window2_first_r_gps_hist->Write();
  nv_neutron_window2_first_gps_ene_hist->Write();
  nv_neutron_window2_first_ntuple->Write();

  nv_neutron_late_ene_s1_hist->Write();
  nv_neutron_late_gps_hist->Write();
  nv_neutron_late_ene_hist->Write();
  nv_neutron_late_small_ene_hist->Write();
  nv_neutron_late_gps_ene_hist->Write();
  nv_neutron_late_ntuple->Write();

  //********Save Fail OD clusters************************
  nv_fail_gps_hist->Write();
  nv_fail_ene_hist->Write();
  nv_fail_small_ene_hist->Write();
  nv_fail_gps_ene_hist->Write();
  nv_fail_ene_s1_hist->Write();
  nv_fail_ntuple->Write();  
  nv_fail_gamma_coincidence_gps_hist->Write();
  nv_fail_gamma_coincidence_ene_hist->Write();
  nv_fail_gamma_coincidence_small_ene_hist->Write();
  nv_fail_gamma_coincidence_gps_ene_hist->Write();
  nv_fail_gamma_coincidence_ene_s1_hist->Write();
  nv_fail_gamma_coincidence_ntuple->Write();  
  nv_fail_neutron_coincidence_gps_hist->Write();
  nv_fail_neutron_coincidence_ene_hist->Write();
  nv_fail_neutron_coincidence_small_ene_hist->Write();
  nv_fail_neutron_coincidence_gps_ene_hist->Write();
  nv_fail_neutron_coincidence_ene_s1_hist->Write();
  nv_fail_neutron_coincidence_ntuple->Write();  

  //**********Save Canvas**************************
  nv_gamma_delay_small_ene_subtracted_hist->Write();
  nv_gamma_after_small_ene_subtracted_hist->Write();
  nv_gamma_coincidence_small_ene_subtracted_hist->Write();
  nv_gamma_first_small_ene_subtracted_hist->Write();
  nv_gamma_prompt_small_ene_subtracted_hist->Write();
  nv_gamma_window1_first_small_ene_subtracted_hist->Write();
  nv_gamma_window2_first_small_ene_subtracted_hist->Write();
  
  nv_neutron_delay_small_ene_subtracted_hist->Write();
  nv_neutron_after_small_ene_subtracted_hist->Write();
  nv_neutron_coincidence_small_ene_subtracted_hist->Write();
  nv_neutron_first_small_ene_subtracted_hist->Write();
  nv_neutron_prompt_small_ene_subtracted_hist->Write();
  nv_neutron_window1_first_small_ene_subtracted_hist->Write();
  nv_neutron_window2_first_small_ene_subtracted_hist->Write();
  nv_charge_height_multiplicity_hist->Write();
  nv_all_charge_height_multiplicity_hist->Write();

  //  c1->Write();
  c2->Write();
  /* c3->Write();
  c4->Write();
  c5->Write();
  c6->Write();
  c7->Write();
  c8->Write();
  c9->Write();
  */ 
  c10->Write();

  c11->Write();
  c12->Write();
  c13->Write();
  c14->Write();
  c15->Write();

  c21->Write();
  c22->Write();
  c23->Write();
  c24->Write();
  c25->Write();
  c26->Write();
  //  c27->Write();
  //  c28->Write();
  //  c29->Write();

  c31->Write();
  c32->Write();
  c33->Write();
  c34->Write();
  c35->Write();

  c41->Write();
  c42->Write();
  c43->Write();
  c44->Write();
  c45->Write();
  c46->Write();
  //  c47->Write();
  //  c48->Write();
  //  c49->Write();
  c51->Write();
  c52->Write();
  c53->Write();
  c54->Write();

  f2D.Write();
  f2D.Close();
  /*
  c10->Close();
  c11->Close();
  c12->Close();
  c13->Close();
  c14->Close();
  c15->Close();

  c21->Close();
  c22->Close();
  c23->Close();
  c24->Close();
  c25->Close();
  c26->Close();

  c31->Close();
  c32->Close();
  c33->Close();
  c34->Close();
  c35->Close();

  c41->Close();
  c42->Close();
  c43->Close();
  c44->Close();
  c45->Close();
  c46->Close();

  c51->Close();
  c52->Close();
  c53->Close();
  c54->Close();

  */
  cout<<"===>> Application Finished"<<endl;
  return 1;
}

#endif /* __CINT __ */


  /*  TH2F* nv_gamma_alpha_ene_s1_hist = new TH2F("nv_gamma_alpha_ene_s1_hist","Veto Gamma Alpha Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_alpha_gps_hist = new TH1F("nv_gamma_alpha_gps_hist","Veto Gamma Alpha Time;Time [ns]",gamma_bins,alpha_time,delay_time);
  TH1F* nv_gamma_alpha_ene_hist = new TH1F("nv_gamma_alpha_ene_hist","Veto Gamma Alpha Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_alpha_small_ene_hist = new TH1F("nv_gamma_alpha_small_ene_hist","Veto Gamma Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_gamma_alpha_gps_ene_hist = new TH2F("nv_gamma_alpha_gps_ene_hist","Veto Gamma Alpha Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,alpha_time,delay_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_alpha_ntuple = new TNtuple("nv_gamma_alpha_ntuple","Veto Gamma Alpha Data","total_s1:time:ene");

  TH2F* nv_gamma_alpha_late_ene_s1_hist = new TH2F("nv_gamma_alpha_late_ene_s1_hist","Veto Gamma Alpha Late Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_alpha_late_gps_hist = new TH1F("nv_gamma_alpha_late_gps_hist","Veto Gamma Alpha Late Time;Time [ns]",gamma_bins,late_time,end_time);
  TH1F* nv_gamma_alpha_late_ene_hist = new TH1F("nv_gamma_alpha_late_ene_hist","Veto Gamma Alpha Late Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_alpha_late_small_ene_hist = new TH1F("nv_gamma_alpha_late_small_ene_hist","Veto Gamma Alpha Late Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_gamma_alpha_late_gps_ene_hist = new TH2F("nv_gamma_alpha_late_gps_ene_hist","Veto Gamma Alpha Late Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,late_time,end_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_alpha_late_ntuple = new TNtuple("nv_gamma_alpha_late_ntuple","Veto Gamma Alpha Late Data","total_s1:time:ene");
  
  TH2F* nv_gamma_alpha_delay_ene_s1_hist = new TH2F("nv_gamma_alpha_delay_ene_s1_hist","Veto Gamma Alpha Delay Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",gamma_bins,0,gamma_coin_ene,200,0,40000);  
  TH1F* nv_gamma_alpha_delay_gps_hist = new TH1F("nv_gamma_alpha_delay_gps_hist","Veto Gamma Alpha Delay Time;Time [ns]",gamma_bins,alpha_delay_time,delay_time);
  TH1F* nv_gamma_alpha_delay_ene_hist = new TH1F("nv_gamma_alpha_delay_ene_hist","Veto Gamma Alpha Delay Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  TH1F* nv_gamma_alpha_delay_small_ene_hist = new TH1F("nv_gamma_alpha_delay_small_ene_hist","Veto Gamma Alpha Delay Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_gamma_alpha_delay_gps_ene_hist = new TH2F("nv_gamma_alpha_delay_gps_ene_hist","Veto Gamma Alpha Delay Time Vs Energy;Time [ns];Energy[PE]",gamma_bins,alpha_delay_time,delay_time,gamma_bins,0,gamma_coin_ene);
  TNtuple* nv_gamma_alpha_delay_ntuple = new TNtuple("nv_gamma_alpha_delay_ntuple","Veto Gamma Alpha Delay Data","total_s1:time:ene");

  */		    // lsv_gamma_gps.push_back(gps_gamma_diff_temp);		  
		  //  lsv_gamma_ene.push_back(od_cluster_charge->at(ncluster));
		  //	  lsv_gamma_s1.push_back(tpc_total_s1);
		  // if(gps_gamma_diff_temp>middle_time && gps_gamma_diff_temp<delay_time)
		  //  if(lsv_gamma_gps<gamma_gps_cut && od_cluster_charge->at(ncluster)<gamma_ene_cut)

		  /*		  if(lsv_gamma_gps.at(0)>gamma_gps_cut)
		    {
		      if(gps_gamma_diff_temp>alpha_time && gps_gamma_diff_temp<delay_time)
			{
			  nv_gamma_alpha_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_gamma_alpha_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_alpha_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_gps_ene_hist->Fill(gps_gamma_diff_temp,od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,od_cluster_charge->at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>alpha_delay_time && gps_gamma_diff_temp<delay_time)
			{
			  lsv_gamma_alpha_ene.push_back(od_cluster_charge->at(ncluster));
			  lsv_gamma_alpha_gps.push_back(gps_gamma_diff_temp);
			  lsv_gamma_alpha_s1.push_back(tpc_total_s1); 
			 
			  nv_gamma_alpha_delay_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_gamma_alpha_delay_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_alpha_delay_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_delay_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_delay_gps_ene_hist->Fill(gps_gamma_diff_temp,od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_delay_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,od_cluster_charge->at(ncluster));	    
			}
		      if(gps_gamma_diff_temp>late_time && gps_gamma_diff_temp<end_time)
			{
			  nv_gamma_alpha_late_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_gamma_alpha_late_gps_hist->Fill(gps_gamma_diff_temp);
			  nv_gamma_alpha_late_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_late_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_late_gps_ene_hist->Fill(gps_gamma_diff_temp,od_cluster_charge->at(ncluster));
			  nv_gamma_alpha_late_ntuple->Fill(tpc_total_s1,gps_gamma_diff_temp,od_cluster_charge->at(ncluster));	    
			}

		      
#ifndef after_pulse		      
		    }
#endif
		  */
		  



  /*  TH2F* nv_neutron_alpha_ene_s1_hist = new TH2F("nv_neutron_alpha_ene_s1_hist","Veto Neutron Alpha Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,40000);  
  TH1F* nv_neutron_alpha_gps_hist = new TH1F("nv_neutron_alpha_gps_hist","Veto Neutron Alpha Time;Time [ns]",neutron_bins,alpha_time,delay_time);
  TH1F* nv_neutron_alpha_ene_hist = new TH1F("nv_neutron_alpha_ene_hist","Veto Neutron Alpha Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_alpha_small_ene_hist = new TH1F("nv_neutron_alpha_small_ene_hist","Veto Neutron Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  TH2F* nv_neutron_alpha_gps_ene_hist = new TH2F("nv_neutron_alpha_gps_ene_hist","Veto Neutron Alpha Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,alpha_time,delay_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_alpha_ntuple = new TNtuple("nv_neutron_alpha_ntuple","Veto Neutron Alpha Data","total_s1:time:ene");

  TH2F* nv_neutron_alpha_late_ene_s1_hist = new TH2F("nv_neutron_alpha_late_ene_s1_hist","Veto Neutron Alpha Late Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,40000);  
  TH1F* nv_neutron_alpha_late_gps_hist = new TH1F("nv_neutron_alpha_late_gps_hist","Veto Neutron Alpha Late Time;Time [ns]",neutron_bins,late_time,end_time);
  TH1F* nv_neutron_alpha_late_ene_hist = new TH1F("nv_neutron_alpha_late_ene_hist","Veto Neutron Alpha Late Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_alpha_late_small_ene_hist = new TH1F("nv_neutron_alpha_late_small_ene_hist","Veto Neutron Alpha Late Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_neutron_alpha_late_gps_ene_hist = new TH2F("nv_neutron_alpha_late_gps_ene_hist","Veto Neutron Alpha Late Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,late_time,end_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_alpha_late_ntuple = new TNtuple("nv_neutron_alpha_late_ntuple","Veto Neutron Alpha Late Data","total_s1:time:ene");

  TH2F* nv_neutron_alpha_delay_ene_s1_hist = new TH2F("nv_neutron_alpha_delay_ene_s1_hist","Veto Neutron Alpha Delay Charge Vs S1 Total;od_cluster_charge [PE];tpc_total_s1[PE]",neutron_bins,0,neutron_coin_ene,200,0,40000);  
  TH1F* nv_neutron_alpha_delay_gps_hist = new TH1F("nv_neutron_alpha_delay_gps_hist","Veto Neutron Alpha Delay Time;Time [ns]",neutron_bins,alpha_delay_time,delay_time);
  TH1F* nv_neutron_alpha_delay_ene_hist = new TH1F("nv_neutron_alpha_delay_ene_hist","Veto Neutron Alpha Delay Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  TH1F* nv_neutron_alpha_delay_small_ene_hist = new TH1F("nv_neutron_alpha_delay_small_ene_hist","Veto Neutron Alpha Delay Energy(small range);Energy [PE]",fail_bins,0,fail_ene);  
  TH2F* nv_neutron_alpha_delay_gps_ene_hist = new TH2F("nv_neutron_alpha_delay_gps_ene_hist","Veto Neutron Alpha Delay Time Vs Energy;Time [ns];Energy[PE]",neutron_bins,alpha_delay_time,delay_time,neutron_bins,0,neutron_coin_ene);
  TNtuple* nv_neutron_alpha_delay_ntuple = new TNtuple("nv_neutron_alpha_delay_ntuple","Veto Neutron Alpha Delay Data","total_s1:time:ene");
  */
		  /*	  if(lsv_neutron_gps.at(0)>gamma_gps_cut)
		    {
		      if(gps_neutron_diff_temp>alpha_time && gps_neutron_diff_temp<delay_time)
			{
			  nv_neutron_alpha_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_neutron_alpha_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_alpha_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_gps_ene_hist->Fill(gps_neutron_diff_temp,od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,od_cluster_charge->at(ncluster));	    
			}
		      if(gps_neutron_diff_temp>alpha_delay_time && gps_neutron_diff_temp<delay_time)
			{
			  lsv_neutron_alpha_ene.push_back(od_cluster_charge->at(ncluster));
			  lsv_neutron_alpha_gps.push_back(gps_gamma_diff_temp);
			  lsv_neutron_alpha_s1.push_back(tpc_total_s1); 
			 
			  nv_neutron_alpha_delay_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_neutron_alpha_delay_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_alpha_delay_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_delay_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_delay_gps_ene_hist->Fill(gps_neutron_diff_temp,od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_delay_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,od_cluster_charge->at(ncluster));  
			}
		      if(gps_neutron_diff_temp>late_time && gps_neutron_diff_temp<end_time)
			{
			  nv_neutron_alpha_late_ene_s1_hist->Fill(od_cluster_charge->at(ncluster),tpc_total_s1);
			  nv_neutron_alpha_late_gps_hist->Fill(gps_neutron_diff_temp);
			  nv_neutron_alpha_late_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_late_small_ene_hist->Fill(od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_late_gps_ene_hist->Fill(gps_neutron_diff_temp,od_cluster_charge->at(ncluster));
			  nv_neutron_alpha_late_ntuple->Fill(tpc_total_s1,gps_neutron_diff_temp,od_cluster_charge->at(ncluster));   
			}
		
#ifndef after_pulse		      
		    }
#endif		  
      
		  */

  /*  TH1F* nv_gamma_alpha_ene_subtracted_hist = new TH1F("nv_gamma_alpha_ene_subtracted_hist","Veto Gamma Subtracted Alpha Energy;Energy [PE]",gamma_bins,0,gamma_coin_ene);
  nv_gamma_alpha_ene_subtracted_hist->Add(nv_gamma_alpha_ene_hist,nv_gamma_late_ene_hist,1,-1);
  TCanvas *c4 = new TCanvas("c4","Veto Gamma Alpha Energy Subtracting BG",1000,400);
  c4->Divide(2,1);
  c4->cd(1);
  //  gPad->SetLogy();
  nv_gamma_alpha_ene_hist->Draw();
  nv_gamma_late_ene_hist->Draw("same");
  c4->cd(2);
  //  gPad->SetLogy();
  //  nv_gamma_alpha_ene_hist->Add(nv_gamma_late_ene_hist,-1);
  nv_gamma_alpha_ene_subtracted_hist->Draw();
  //c4->SaveAs(Form("%snv_gamma_alpha_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_alpha_ene_subtracted_hist = new TH1F("nv_neutron_alpha_ene_subtracted_hist","Veto Neutron Subtracted Alpha Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  nv_neutron_alpha_ene_subtracted_hist->Add(nv_neutron_alpha_ene_hist,nv_neutron_late_ene_hist,1,-1);
  TCanvas *c5 = new TCanvas("c5","Veto Neutron Alpha Energy Subtracting BG",1000,400);
  c5->Divide(2,1);
  c5->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_ene_hist->Draw();
  nv_neutron_late_ene_hist->Draw("same");
  c5->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_ene_subtracted_hist->Draw();
  //c5->SaveAs(Form("%snv_neutron_alpha_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_gamma_alpha_small_ene_subtracted_hist = new TH1F("nv_gamma_alpha_small_ene_subtracted_hist","Veto Gamma Subtracted Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_alpha_small_ene_subtracted_hist->Add(nv_gamma_alpha_small_ene_hist,nv_gamma_late_small_ene_hist,1,-1);
  TCanvas *c6 = new TCanvas("c6","Veto Gamma Alpha Small Energy Subtracting BG",1000,400);
  c6->Divide(2,1);
  c6->cd(1);
  //  gPad->SetLogy();
  nv_gamma_alpha_small_ene_hist->Draw();
  nv_gamma_late_small_ene_hist->Draw("same");
  c6->cd(2);
  //  gPad->SetLogy();
  //  nv_gamma_alpha_small_ene_hist->Add(nv_gamma_late_ene_hist,-1);
  nv_gamma_alpha_small_ene_subtracted_hist->Draw();
  //c6->SaveAs(Form("%snv_gamma_alpha_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_alpha_small_ene_subtracted_hist = new TH1F("nv_neutron_alpha_small_ene_subtracted_hist","Veto Neutron Subtracted Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_alpha_small_ene_subtracted_hist->Add(nv_neutron_alpha_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c7 = new TCanvas("c7","Veto Neutron Alpha Small Energy Subtracting BG",1000,400);
  c7->Divide(2,1);
  c7->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c7->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_small_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_small_ene_subtracted_hist->Draw();
  //c7->SaveAs(Form("%snv_neutron_alpha_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_gamma_alpha_delay_small_ene_subtracted_hist = new TH1F("nv_gamma_alpha_delay_small_ene_subtracted_hist","Veto Gamma Subtracted Alpha Delay Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_gamma_alpha_delay_small_ene_subtracted_hist->Add(nv_gamma_alpha_delay_small_ene_hist,nv_gamma_alpha_late_small_ene_hist,1,-1);
  TCanvas *c8 = new TCanvas("c8","Veto Gamma Alpha Delay Small Energy Subtracting BG",1000,400);
  c8->Divide(2,1);
  c8->cd(1);
  //  gPad->SetLogy();
  nv_gamma_alpha_delay_small_ene_hist->Draw();
  nv_gamma_alpha_late_small_ene_hist->Draw("same");
  c8->cd(2);
  //  gPad->SetLogy();
  //  nv_gamma_alpha_delay_small_ene_hist->Add(nv_gamma_late_ene_hist,-1);
  nv_gamma_alpha_delay_small_ene_subtracted_hist->Draw();
  //c8->SaveAs(Form("%snv_gamma_alpha_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_alpha_delay_small_ene_subtracted_hist = new TH1F("nv_neutron_alpha_delay_small_ene_subtracted_hist","Veto Neutron Subtracted Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_alpha_delay_small_ene_subtracted_hist->Add(nv_neutron_alpha_delay_small_ene_hist,nv_neutron_alpha_late_small_ene_hist,1,-1);
  TCanvas *c9 = new TCanvas("c9","Veto Neutron Alpha Delay Small Energy Subtracting BG",1000,400);
  c9->Divide(2,1);
  c9->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_delay_small_ene_hist->Draw();
  nv_neutron_alpha_late_small_ene_hist->Draw("same");
  c9->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_delay_small_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_delay_small_ene_subtracted_hist->Draw();
  //c9->SaveAs(Form("%snv_neutron_alpha_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  //  nv_gamma_alpha_late_small_ene_hist->SetLineColor(linecolor.at(3));
  //  nv_neutron_alpha_late_small_ene_hist->SetLineColor(linecolor.at(4));

  nv_gamma_alpha_ene_subtracted_hist->Write();
  nv_neutron_alpha_ene_subtracted_hist->Write();
  nv_gamma_alpha_small_ene_subtracted_hist->Write();
  nv_neutron_alpha_small_ene_subtracted_hist->Write();
  nv_gamma_alpha_delay_small_ene_subtracted_hist->Write();
  nv_neutron_alpha_delay_small_ene_subtracted_hist->Write();
  

  */  

  /*  TCanvas *c27 = new TCanvas("c27","Veto Gamma Alpha",1000,600);
  c27->Divide(2,2);
  c27->cd(1);
  gPad->SetLogy();
  nv_gamma_alpha_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_gps_hist->Draw();
  c27->cd(2);
  gPad->SetLogy();
  nv_gamma_alpha_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_ene_hist->Draw();
  c27->cd(3);
  gPad->SetLogy();
  //  nv_gamma_alpha_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_gps_ene_hist->Draw("colz");
  c27->cd(4);
  gPad->SetLogy();
  //  nv_gamma_alpha_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_ene_s1_hist->Draw("colz");
  //  c27->SaveAs(Form("%snv_gamma_alpha%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c28 = new TCanvas("c28","Veto Gamma Alpha Delay",1000,600);
  c28->Divide(2,2);
  c28->cd(1);
  gPad->SetLogy();
  nv_gamma_alpha_delay_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_delay_gps_hist->Draw();
  c28->cd(2);
  gPad->SetLogy();
  nv_gamma_alpha_delay_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_delay_ene_hist->Draw();
  c28->cd(3);
  gPad->SetLogy();
  //  nv_gamma_alpha_delay_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_delay_gps_ene_hist->Draw("colz");
  c28->cd(4);
  gPad->SetLogy();
  //  nv_gamma_alpha_delay_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_delay_ene_s1_hist->Draw("colz");
  //  c28->SaveAs(Form("%snv_gamma_alpha_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c29 = new TCanvas("c29","Veto Gamma Alpha Late",1000,600);
  c29->Divide(2,2);
  c29->cd(1);
  gPad->SetLogy();
  nv_gamma_alpha_late_gps_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_late_gps_hist->Draw();
  c29->cd(2);
  gPad->SetLogy();
  nv_gamma_alpha_late_ene_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_late_ene_hist->Draw();
  c29->cd(3);
  gPad->SetLogy();
  //  nv_gamma_alpha_late_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_gamma_alpha_late_gps_ene_hist->Draw("colz");
  c29->cd(4);
  gPad->SetLogy();
  //  nv_gamma_alpha_late_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_gamma_alpha_late_ene_s1_hist->Draw("colz");
  //  c29->SaveAs(Form("%snv_gamma_alpha_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  */

  /*  TCanvas *c47 = new TCanvas("c47","Veto Neutron Alpha",1000,600);
  c47->Divide(2,2);
  c47->cd(1);
  gPad->SetLogy();
  nv_neutron_alpha_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_gps_hist->Draw();
  c47->cd(2);
  gPad->SetLogy();
  nv_neutron_alpha_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_ene_hist->Draw();
  c47->cd(3);
  gPad->SetLogy();
  //  nv_neutron_alpha_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_gps_ene_hist->Draw("colz");
  c47->cd(4);
  gPad->SetLogy();
  //  nv_neutron_alpha_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_ene_s1_hist->Draw("colz");
  //  c47->SaveAs(Form("%snv_neutron_alpha%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c48 = new TCanvas("c48","Veto Neutron Alpha Delay",1000,600);
  c48->Divide(2,2);
  c48->cd(1);
  gPad->SetLogy();
  nv_neutron_alpha_delay_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_delay_gps_hist->Draw();
  c48->cd(2);
  gPad->SetLogy();
  nv_neutron_alpha_delay_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_delay_ene_hist->Draw();
  c48->cd(3);
  gPad->SetLogy();
  //  nv_neutron_alpha_delay_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_delay_gps_ene_hist->Draw("colz");
  c48->cd(4);
  gPad->SetLogy();
  //  nv_neutron_alpha_delay_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_delay_ene_s1_hist->Draw("colz");
  //  c48->SaveAs(Form("%snv_neutron_alpha_delay%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TCanvas *c49 = new TCanvas("c49","Veto Neutron Alpha Late",1000,600);
  c49->Divide(2,2);
  c49->cd(1);
  gPad->SetLogy();
  nv_neutron_alpha_late_gps_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_late_gps_hist->Draw();
  c49->cd(2);
  gPad->SetLogy();
  nv_neutron_alpha_late_ene_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_late_ene_hist->Draw();
  c49->cd(3);
  gPad->SetLogy();
  //  nv_neutron_alpha_late_gps_ene_hist->SetLineColor(linecolor.at(5));
  nv_neutron_alpha_late_gps_ene_hist->Draw("colz");
  c49->cd(4);
  gPad->SetLogy();
  //  nv_neutron_alpha_late_ene_s1_hist->SetLineColor(linecolor.at(6));
  nv_neutron_alpha_late_ene_s1_hist->Draw("colz");
  //  c49->SaveAs(Form("%snv_neutron_alpha_late%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  */

  /*  TH1F* nv_neutron_alpha_ene_subtracted_hist = new TH1F("nv_neutron_alpha_ene_subtracted_hist","Veto Neutron Subtracted Alpha Energy;Energy [PE]",neutron_bins,0,neutron_coin_ene);
  nv_neutron_alpha_ene_subtracted_hist->Add(nv_neutron_alpha_ene_hist,nv_neutron_late_ene_hist,1,-1);
  TCanvas *c5 = new TCanvas("c5","Veto Neutron Alpha Energy Subtracting BG",1000,400);
  c5->Divide(2,1);
  c5->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_ene_hist->Draw();
  nv_neutron_late_ene_hist->Draw("same");
  c5->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_ene_subtracted_hist->Draw();
  //c5->SaveAs(Form("%snv_neutron_alpha_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
 
  TH1F* nv_neutron_alpha_small_ene_subtracted_hist = new TH1F("nv_neutron_alpha_small_ene_subtracted_hist","Veto Neutron Subtracted Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_alpha_small_ene_subtracted_hist->Add(nv_neutron_alpha_small_ene_hist,nv_neutron_late_small_ene_hist,1,-1);
  TCanvas *c7 = new TCanvas("c7","Veto Neutron Alpha Small Energy Subtracting BG",1000,400);
  c7->Divide(2,1);
  c7->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_small_ene_hist->Draw();
  nv_neutron_late_small_ene_hist->Draw("same");
  c7->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_small_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_small_ene_subtracted_hist->Draw();
  //c7->SaveAs(Form("%snv_neutron_alpha_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));

  TH1F* nv_neutron_alpha_delay_small_ene_subtracted_hist = new TH1F("nv_neutron_alpha_delay_small_ene_subtracted_hist","Veto Neutron Subtracted Alpha Small Energy;Energy [PE]",fail_bins,0,fail_ene);
  nv_neutron_alpha_delay_small_ene_subtracted_hist->Add(nv_neutron_alpha_delay_small_ene_hist,nv_neutron_alpha_late_small_ene_hist,1,-1);
  TCanvas *c9 = new TCanvas("c9","Veto Neutron Alpha Delay Small Energy Subtracting BG",1000,400);
  c9->Divide(2,1);
  c9->cd(1);
  //  gPad->SetLogy();
  nv_neutron_alpha_delay_small_ene_hist->Draw();
  nv_neutron_alpha_late_small_ene_hist->Draw("same");
  c9->cd(2);
  //  gPad->SetLogy();
  //  nv_neutron_alpha_delay_small_ene_hist->Add(nv_neutron_late_ene_hist,-1);
  nv_neutron_alpha_delay_small_ene_subtracted_hist->Draw();
  //c9->SaveAs(Form("%snv_neutron_alpha_delay_small_ene_subtracted%s.%s",plotdir.c_str(),Time.c_str(),ext.c_str()));
  */



  /*  nv_gamma_alpha_gps_hist->Write();
  nv_gamma_alpha_ene_hist->Write();
  nv_gamma_alpha_small_ene_hist->Write();
  nv_gamma_alpha_gps_ene_hist->Write();
  nv_gamma_alpha_ene_s1_hist->Write();
  nv_gamma_alpha_ntuple->Write();
  nv_gamma_alpha_delay_gps_hist->Write();
  nv_gamma_alpha_delay_ene_hist->Write();
  nv_gamma_alpha_delay_small_ene_hist->Write();
  nv_gamma_alpha_delay_gps_ene_hist->Write();
  nv_gamma_alpha_delay_ene_s1_hist->Write();
  nv_gamma_alpha_delay_ntuple->Write();
  nv_gamma_alpha_late_gps_hist->Write();
  nv_gamma_alpha_late_ene_hist->Write();
  nv_gamma_alpha_late_small_ene_hist->Write();
  nv_gamma_alpha_late_gps_ene_hist->Write();
  nv_gamma_alpha_late_ene_s1_hist->Write();
  nv_gamma_alpha_late_ntuple->Write();
  */
  /*  nv_neutron_alpha_gps_hist->Write();
  nv_neutron_alpha_ene_hist->Write();
  nv_neutron_alpha_small_ene_hist->Write();
  nv_neutron_alpha_gps_ene_hist->Write();
  nv_neutron_alpha_ene_s1_hist->Write();
  nv_neutron_alpha_ntuple->Write();
  nv_neutron_alpha_delay_gps_hist->Write();
  nv_neutron_alpha_delay_ene_hist->Write();
  nv_neutron_alpha_delay_small_ene_hist->Write();
  nv_neutron_alpha_delay_gps_ene_hist->Write();
  nv_neutron_alpha_delay_ene_s1_hist->Write();
  nv_neutron_alpha_delay_ntuple->Write();
  nv_neutron_alpha_late_gps_hist->Write();
  nv_neutron_alpha_late_ene_hist->Write();
  nv_neutron_alpha_late_small_ene_hist->Write();
  nv_neutron_alpha_late_gps_ene_hist->Write();
  nv_neutron_alpha_late_ene_s1_hist->Write();
  nv_neutron_alpha_late_ntuple->Write();
  */
